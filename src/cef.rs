// Copyright (c) 2020 Marshall A. Greenblatt. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the name Chromium Embedded
// Framework nor the names of its contributors may be used to endorse
// or promote products derived from this software without specific prior
// written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// SPDX-License-Identifier: BSD-3-Clause

#![allow(dead_code, non_camel_case_types, non_snake_case, non_upper_case_globals)]

// bindgen --no-doc-comments --no-derive-copy --no-derive-debug --no-layout-tests --allowlist-function cef_urlrequest_create --allowlist-function cef_string_userfree_utf16_free -o src/cef.rs include/capi/cef_urlrequest_capi.h -- -I.

/* automatically generated by rust-bindgen 0.63.0 */
pub type int64 = ::std::os::raw::c_long;
pub type uint64 = ::std::os::raw::c_ulong;
pub type uint32 = ::std::os::raw::c_uint;
pub type char16 = ::std::os::raw::c_ushort;
#[repr(C)]
pub struct _cef_string_utf16_t {
    pub str_: *mut char16,
    pub length: usize,
    pub dtor: ::std::option::Option<unsafe extern "C" fn(str_: *mut char16)>,
}
pub type cef_string_utf16_t = _cef_string_utf16_t;
pub type cef_string_userfree_utf16_t = *mut cef_string_utf16_t;
extern "C" {
    pub fn cef_string_userfree_utf16_free(str_: cef_string_userfree_utf16_t);
}
pub type cef_string_userfree_t = cef_string_userfree_utf16_t;
pub type cef_string_t = cef_string_utf16_t;
pub type cef_string_list_t = *mut ::std::os::raw::c_void;
pub type cef_string_map_t = *mut ::std::os::raw::c_void;
pub type cef_string_multimap_t = *mut ::std::os::raw::c_void;
#[repr(C)]
pub struct _cef_basetime_t {
    pub val: int64,
}
pub type cef_basetime_t = _cef_basetime_t;
#[repr(C)]
pub struct _cef_point_t {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
pub type cef_point_t = _cef_point_t;
#[repr(C)]
pub struct _cef_rect_t {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
pub type cef_rect_t = _cef_rect_t;
#[repr(C)]
pub struct _cef_size_t {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
pub type cef_size_t = _cef_size_t;
#[repr(C)]
pub struct _cef_window_info_t {
    pub window_name: cef_string_t,
    pub bounds: cef_rect_t,
    pub parent_window: ::std::os::raw::c_ulong,
    pub windowless_rendering_enabled: ::std::os::raw::c_int,
    pub shared_texture_enabled: ::std::os::raw::c_int,
    pub external_begin_frame_enabled: ::std::os::raw::c_int,
    pub window: ::std::os::raw::c_ulong,
}
pub type cef_color_t = uint32;
pub const cef_state_t_STATE_DEFAULT: cef_state_t = 0;
pub const cef_state_t_STATE_ENABLED: cef_state_t = 1;
pub const cef_state_t_STATE_DISABLED: cef_state_t = 2;
pub type cef_state_t = ::std::os::raw::c_uint;
#[repr(C)]
pub struct _cef_browser_settings_t {
    pub size: usize,
    pub windowless_frame_rate: ::std::os::raw::c_int,
    pub standard_font_family: cef_string_t,
    pub fixed_font_family: cef_string_t,
    pub serif_font_family: cef_string_t,
    pub sans_serif_font_family: cef_string_t,
    pub cursive_font_family: cef_string_t,
    pub fantasy_font_family: cef_string_t,
    pub default_font_size: ::std::os::raw::c_int,
    pub default_fixed_font_size: ::std::os::raw::c_int,
    pub minimum_font_size: ::std::os::raw::c_int,
    pub minimum_logical_font_size: ::std::os::raw::c_int,
    pub default_encoding: cef_string_t,
    pub remote_fonts: cef_state_t,
    pub javascript: cef_state_t,
    pub javascript_close_windows: cef_state_t,
    pub javascript_access_clipboard: cef_state_t,
    pub javascript_dom_paste: cef_state_t,
    pub image_loading: cef_state_t,
    pub image_shrink_standalone_to_fit: cef_state_t,
    pub text_area_resize: cef_state_t,
    pub tab_to_links: cef_state_t,
    pub local_storage: cef_state_t,
    pub databases: cef_state_t,
    pub webgl: cef_state_t,
    pub background_color: cef_color_t,
    pub accept_language_list: cef_string_t,
    pub chrome_status_bubble: cef_state_t,
}
pub const cef_cookie_priority_t_CEF_COOKIE_PRIORITY_LOW: cef_cookie_priority_t = -1;
pub const cef_cookie_priority_t_CEF_COOKIE_PRIORITY_MEDIUM: cef_cookie_priority_t = 0;
pub const cef_cookie_priority_t_CEF_COOKIE_PRIORITY_HIGH: cef_cookie_priority_t = 1;
pub type cef_cookie_priority_t = ::std::os::raw::c_int;
pub const cef_cookie_same_site_t_CEF_COOKIE_SAME_SITE_UNSPECIFIED: cef_cookie_same_site_t = 0;
pub const cef_cookie_same_site_t_CEF_COOKIE_SAME_SITE_NO_RESTRICTION: cef_cookie_same_site_t = 1;
pub const cef_cookie_same_site_t_CEF_COOKIE_SAME_SITE_LAX_MODE: cef_cookie_same_site_t = 2;
pub const cef_cookie_same_site_t_CEF_COOKIE_SAME_SITE_STRICT_MODE: cef_cookie_same_site_t = 3;
pub type cef_cookie_same_site_t = ::std::os::raw::c_uint;
#[repr(C)]
pub struct _cef_cookie_t {
    pub name: cef_string_t,
    pub value: cef_string_t,
    pub domain: cef_string_t,
    pub path: cef_string_t,
    pub secure: ::std::os::raw::c_int,
    pub httponly: ::std::os::raw::c_int,
    pub creation: cef_basetime_t,
    pub last_access: cef_basetime_t,
    pub has_expires: ::std::os::raw::c_int,
    pub expires: cef_basetime_t,
    pub same_site: cef_cookie_same_site_t,
    pub priority: cef_cookie_priority_t,
}
pub const cef_errorcode_t_ERR_NONE: cef_errorcode_t = 0;
pub const cef_errorcode_t_ERR_IO_PENDING: cef_errorcode_t = -1;
pub const cef_errorcode_t_ERR_FAILED: cef_errorcode_t = -2;
pub const cef_errorcode_t_ERR_ABORTED: cef_errorcode_t = -3;
pub const cef_errorcode_t_ERR_INVALID_ARGUMENT: cef_errorcode_t = -4;
pub const cef_errorcode_t_ERR_INVALID_HANDLE: cef_errorcode_t = -5;
pub const cef_errorcode_t_ERR_FILE_NOT_FOUND: cef_errorcode_t = -6;
pub const cef_errorcode_t_ERR_TIMED_OUT: cef_errorcode_t = -7;
pub const cef_errorcode_t_ERR_FILE_TOO_BIG: cef_errorcode_t = -8;
pub const cef_errorcode_t_ERR_UNEXPECTED: cef_errorcode_t = -9;
pub const cef_errorcode_t_ERR_ACCESS_DENIED: cef_errorcode_t = -10;
pub const cef_errorcode_t_ERR_NOT_IMPLEMENTED: cef_errorcode_t = -11;
pub const cef_errorcode_t_ERR_INSUFFICIENT_RESOURCES: cef_errorcode_t = -12;
pub const cef_errorcode_t_ERR_OUT_OF_MEMORY: cef_errorcode_t = -13;
pub const cef_errorcode_t_ERR_UPLOAD_FILE_CHANGED: cef_errorcode_t = -14;
pub const cef_errorcode_t_ERR_SOCKET_NOT_CONNECTED: cef_errorcode_t = -15;
pub const cef_errorcode_t_ERR_FILE_EXISTS: cef_errorcode_t = -16;
pub const cef_errorcode_t_ERR_FILE_PATH_TOO_LONG: cef_errorcode_t = -17;
pub const cef_errorcode_t_ERR_FILE_NO_SPACE: cef_errorcode_t = -18;
pub const cef_errorcode_t_ERR_FILE_VIRUS_INFECTED: cef_errorcode_t = -19;
pub const cef_errorcode_t_ERR_BLOCKED_BY_CLIENT: cef_errorcode_t = -20;
pub const cef_errorcode_t_ERR_NETWORK_CHANGED: cef_errorcode_t = -21;
pub const cef_errorcode_t_ERR_BLOCKED_BY_ADMINISTRATOR: cef_errorcode_t = -22;
pub const cef_errorcode_t_ERR_SOCKET_IS_CONNECTED: cef_errorcode_t = -23;
pub const cef_errorcode_t_ERR_BLOCKED_ENROLLMENT_CHECK_PENDING: cef_errorcode_t = -24;
pub const cef_errorcode_t_ERR_UPLOAD_STREAM_REWIND_NOT_SUPPORTED: cef_errorcode_t = -25;
pub const cef_errorcode_t_ERR_CONTEXT_SHUT_DOWN: cef_errorcode_t = -26;
pub const cef_errorcode_t_ERR_BLOCKED_BY_RESPONSE: cef_errorcode_t = -27;
pub const cef_errorcode_t_ERR_CLEARTEXT_NOT_PERMITTED: cef_errorcode_t = -29;
pub const cef_errorcode_t_ERR_BLOCKED_BY_CSP: cef_errorcode_t = -30;
pub const cef_errorcode_t_ERR_H2_OR_QUIC_REQUIRED: cef_errorcode_t = -31;
pub const cef_errorcode_t_ERR_CONNECTION_CLOSED: cef_errorcode_t = -100;
pub const cef_errorcode_t_ERR_CONNECTION_RESET: cef_errorcode_t = -101;
pub const cef_errorcode_t_ERR_CONNECTION_REFUSED: cef_errorcode_t = -102;
pub const cef_errorcode_t_ERR_CONNECTION_ABORTED: cef_errorcode_t = -103;
pub const cef_errorcode_t_ERR_CONNECTION_FAILED: cef_errorcode_t = -104;
pub const cef_errorcode_t_ERR_NAME_NOT_RESOLVED: cef_errorcode_t = -105;
pub const cef_errorcode_t_ERR_INTERNET_DISCONNECTED: cef_errorcode_t = -106;
pub const cef_errorcode_t_ERR_SSL_PROTOCOL_ERROR: cef_errorcode_t = -107;
pub const cef_errorcode_t_ERR_ADDRESS_INVALID: cef_errorcode_t = -108;
pub const cef_errorcode_t_ERR_ADDRESS_UNREACHABLE: cef_errorcode_t = -109;
pub const cef_errorcode_t_ERR_SSL_CLIENT_AUTH_CERT_NEEDED: cef_errorcode_t = -110;
pub const cef_errorcode_t_ERR_TUNNEL_CONNECTION_FAILED: cef_errorcode_t = -111;
pub const cef_errorcode_t_ERR_NO_SSL_VERSIONS_ENABLED: cef_errorcode_t = -112;
pub const cef_errorcode_t_ERR_SSL_VERSION_OR_CIPHER_MISMATCH: cef_errorcode_t = -113;
pub const cef_errorcode_t_ERR_SSL_RENEGOTIATION_REQUESTED: cef_errorcode_t = -114;
pub const cef_errorcode_t_ERR_PROXY_AUTH_UNSUPPORTED: cef_errorcode_t = -115;
pub const cef_errorcode_t_ERR_BAD_SSL_CLIENT_AUTH_CERT: cef_errorcode_t = -117;
pub const cef_errorcode_t_ERR_CONNECTION_TIMED_OUT: cef_errorcode_t = -118;
pub const cef_errorcode_t_ERR_HOST_RESOLVER_QUEUE_TOO_LARGE: cef_errorcode_t = -119;
pub const cef_errorcode_t_ERR_SOCKS_CONNECTION_FAILED: cef_errorcode_t = -120;
pub const cef_errorcode_t_ERR_SOCKS_CONNECTION_HOST_UNREACHABLE: cef_errorcode_t = -121;
pub const cef_errorcode_t_ERR_ALPN_NEGOTIATION_FAILED: cef_errorcode_t = -122;
pub const cef_errorcode_t_ERR_SSL_NO_RENEGOTIATION: cef_errorcode_t = -123;
pub const cef_errorcode_t_ERR_WINSOCK_UNEXPECTED_WRITTEN_BYTES: cef_errorcode_t = -124;
pub const cef_errorcode_t_ERR_SSL_DECOMPRESSION_FAILURE_ALERT: cef_errorcode_t = -125;
pub const cef_errorcode_t_ERR_SSL_BAD_RECORD_MAC_ALERT: cef_errorcode_t = -126;
pub const cef_errorcode_t_ERR_PROXY_AUTH_REQUESTED: cef_errorcode_t = -127;
pub const cef_errorcode_t_ERR_PROXY_CONNECTION_FAILED: cef_errorcode_t = -130;
pub const cef_errorcode_t_ERR_MANDATORY_PROXY_CONFIGURATION_FAILED: cef_errorcode_t = -131;
pub const cef_errorcode_t_ERR_PRECONNECT_MAX_SOCKET_LIMIT: cef_errorcode_t = -133;
pub const cef_errorcode_t_ERR_SSL_CLIENT_AUTH_PRIVATE_KEY_ACCESS_DENIED: cef_errorcode_t = -134;
pub const cef_errorcode_t_ERR_SSL_CLIENT_AUTH_CERT_NO_PRIVATE_KEY: cef_errorcode_t = -135;
pub const cef_errorcode_t_ERR_PROXY_CERTIFICATE_INVALID: cef_errorcode_t = -136;
pub const cef_errorcode_t_ERR_NAME_RESOLUTION_FAILED: cef_errorcode_t = -137;
pub const cef_errorcode_t_ERR_NETWORK_ACCESS_DENIED: cef_errorcode_t = -138;
pub const cef_errorcode_t_ERR_TEMPORARILY_THROTTLED: cef_errorcode_t = -139;
pub const cef_errorcode_t_ERR_HTTPS_PROXY_TUNNEL_RESPONSE_REDIRECT: cef_errorcode_t = -140;
pub const cef_errorcode_t_ERR_SSL_CLIENT_AUTH_SIGNATURE_FAILED: cef_errorcode_t = -141;
pub const cef_errorcode_t_ERR_MSG_TOO_BIG: cef_errorcode_t = -142;
pub const cef_errorcode_t_ERR_WS_PROTOCOL_ERROR: cef_errorcode_t = -145;
pub const cef_errorcode_t_ERR_ADDRESS_IN_USE: cef_errorcode_t = -147;
pub const cef_errorcode_t_ERR_SSL_HANDSHAKE_NOT_COMPLETED: cef_errorcode_t = -148;
pub const cef_errorcode_t_ERR_SSL_BAD_PEER_PUBLIC_KEY: cef_errorcode_t = -149;
pub const cef_errorcode_t_ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN: cef_errorcode_t = -150;
pub const cef_errorcode_t_ERR_CLIENT_AUTH_CERT_TYPE_UNSUPPORTED: cef_errorcode_t = -151;
pub const cef_errorcode_t_ERR_SSL_DECRYPT_ERROR_ALERT: cef_errorcode_t = -153;
pub const cef_errorcode_t_ERR_WS_THROTTLE_QUEUE_TOO_LARGE: cef_errorcode_t = -154;
pub const cef_errorcode_t_ERR_SSL_SERVER_CERT_CHANGED: cef_errorcode_t = -156;
pub const cef_errorcode_t_ERR_SSL_UNRECOGNIZED_NAME_ALERT: cef_errorcode_t = -159;
pub const cef_errorcode_t_ERR_SOCKET_SET_RECEIVE_BUFFER_SIZE_ERROR: cef_errorcode_t = -160;
pub const cef_errorcode_t_ERR_SOCKET_SET_SEND_BUFFER_SIZE_ERROR: cef_errorcode_t = -161;
pub const cef_errorcode_t_ERR_SOCKET_RECEIVE_BUFFER_SIZE_UNCHANGEABLE: cef_errorcode_t = -162;
pub const cef_errorcode_t_ERR_SOCKET_SEND_BUFFER_SIZE_UNCHANGEABLE: cef_errorcode_t = -163;
pub const cef_errorcode_t_ERR_SSL_CLIENT_AUTH_CERT_BAD_FORMAT: cef_errorcode_t = -164;
pub const cef_errorcode_t_ERR_ICANN_NAME_COLLISION: cef_errorcode_t = -166;
pub const cef_errorcode_t_ERR_SSL_SERVER_CERT_BAD_FORMAT: cef_errorcode_t = -167;
pub const cef_errorcode_t_ERR_CT_STH_PARSING_FAILED: cef_errorcode_t = -168;
pub const cef_errorcode_t_ERR_CT_STH_INCOMPLETE: cef_errorcode_t = -169;
pub const cef_errorcode_t_ERR_UNABLE_TO_REUSE_CONNECTION_FOR_PROXY_AUTH: cef_errorcode_t = -170;
pub const cef_errorcode_t_ERR_CT_CONSISTENCY_PROOF_PARSING_FAILED: cef_errorcode_t = -171;
pub const cef_errorcode_t_ERR_SSL_OBSOLETE_CIPHER: cef_errorcode_t = -172;
pub const cef_errorcode_t_ERR_WS_UPGRADE: cef_errorcode_t = -173;
pub const cef_errorcode_t_ERR_READ_IF_READY_NOT_IMPLEMENTED: cef_errorcode_t = -174;
pub const cef_errorcode_t_ERR_NO_BUFFER_SPACE: cef_errorcode_t = -176;
pub const cef_errorcode_t_ERR_SSL_CLIENT_AUTH_NO_COMMON_ALGORITHMS: cef_errorcode_t = -177;
pub const cef_errorcode_t_ERR_EARLY_DATA_REJECTED: cef_errorcode_t = -178;
pub const cef_errorcode_t_ERR_WRONG_VERSION_ON_EARLY_DATA: cef_errorcode_t = -179;
pub const cef_errorcode_t_ERR_TLS13_DOWNGRADE_DETECTED: cef_errorcode_t = -180;
pub const cef_errorcode_t_ERR_SSL_KEY_USAGE_INCOMPATIBLE: cef_errorcode_t = -181;
pub const cef_errorcode_t_ERR_INVALID_ECH_CONFIG_LIST: cef_errorcode_t = -182;
pub const cef_errorcode_t_ERR_ECH_NOT_NEGOTIATED: cef_errorcode_t = -183;
pub const cef_errorcode_t_ERR_ECH_FALLBACK_CERTIFICATE_INVALID: cef_errorcode_t = -184;
pub const cef_errorcode_t_ERR_CERT_COMMON_NAME_INVALID: cef_errorcode_t = -200;
pub const cef_errorcode_t_ERR_CERT_DATE_INVALID: cef_errorcode_t = -201;
pub const cef_errorcode_t_ERR_CERT_AUTHORITY_INVALID: cef_errorcode_t = -202;
pub const cef_errorcode_t_ERR_CERT_CONTAINS_ERRORS: cef_errorcode_t = -203;
pub const cef_errorcode_t_ERR_CERT_NO_REVOCATION_MECHANISM: cef_errorcode_t = -204;
pub const cef_errorcode_t_ERR_CERT_UNABLE_TO_CHECK_REVOCATION: cef_errorcode_t = -205;
pub const cef_errorcode_t_ERR_CERT_REVOKED: cef_errorcode_t = -206;
pub const cef_errorcode_t_ERR_CERT_INVALID: cef_errorcode_t = -207;
pub const cef_errorcode_t_ERR_CERT_WEAK_SIGNATURE_ALGORITHM: cef_errorcode_t = -208;
pub const cef_errorcode_t_ERR_CERT_NON_UNIQUE_NAME: cef_errorcode_t = -210;
pub const cef_errorcode_t_ERR_CERT_WEAK_KEY: cef_errorcode_t = -211;
pub const cef_errorcode_t_ERR_CERT_NAME_CONSTRAINT_VIOLATION: cef_errorcode_t = -212;
pub const cef_errorcode_t_ERR_CERT_VALIDITY_TOO_LONG: cef_errorcode_t = -213;
pub const cef_errorcode_t_ERR_CERTIFICATE_TRANSPARENCY_REQUIRED: cef_errorcode_t = -214;
pub const cef_errorcode_t_ERR_CERT_SYMANTEC_LEGACY: cef_errorcode_t = -215;
pub const cef_errorcode_t_ERR_CERT_KNOWN_INTERCEPTION_BLOCKED: cef_errorcode_t = -217;
pub const cef_errorcode_t_ERR_CERT_END: cef_errorcode_t = -219;
pub const cef_errorcode_t_ERR_INVALID_URL: cef_errorcode_t = -300;
pub const cef_errorcode_t_ERR_DISALLOWED_URL_SCHEME: cef_errorcode_t = -301;
pub const cef_errorcode_t_ERR_UNKNOWN_URL_SCHEME: cef_errorcode_t = -302;
pub const cef_errorcode_t_ERR_INVALID_REDIRECT: cef_errorcode_t = -303;
pub const cef_errorcode_t_ERR_TOO_MANY_REDIRECTS: cef_errorcode_t = -310;
pub const cef_errorcode_t_ERR_UNSAFE_REDIRECT: cef_errorcode_t = -311;
pub const cef_errorcode_t_ERR_UNSAFE_PORT: cef_errorcode_t = -312;
pub const cef_errorcode_t_ERR_INVALID_RESPONSE: cef_errorcode_t = -320;
pub const cef_errorcode_t_ERR_INVALID_CHUNKED_ENCODING: cef_errorcode_t = -321;
pub const cef_errorcode_t_ERR_METHOD_NOT_SUPPORTED: cef_errorcode_t = -322;
pub const cef_errorcode_t_ERR_UNEXPECTED_PROXY_AUTH: cef_errorcode_t = -323;
pub const cef_errorcode_t_ERR_EMPTY_RESPONSE: cef_errorcode_t = -324;
pub const cef_errorcode_t_ERR_RESPONSE_HEADERS_TOO_BIG: cef_errorcode_t = -325;
pub const cef_errorcode_t_ERR_PAC_SCRIPT_FAILED: cef_errorcode_t = -327;
pub const cef_errorcode_t_ERR_REQUEST_RANGE_NOT_SATISFIABLE: cef_errorcode_t = -328;
pub const cef_errorcode_t_ERR_MALFORMED_IDENTITY: cef_errorcode_t = -329;
pub const cef_errorcode_t_ERR_CONTENT_DECODING_FAILED: cef_errorcode_t = -330;
pub const cef_errorcode_t_ERR_NETWORK_IO_SUSPENDED: cef_errorcode_t = -331;
pub const cef_errorcode_t_ERR_SYN_REPLY_NOT_RECEIVED: cef_errorcode_t = -332;
pub const cef_errorcode_t_ERR_ENCODING_CONVERSION_FAILED: cef_errorcode_t = -333;
pub const cef_errorcode_t_ERR_UNRECOGNIZED_FTP_DIRECTORY_LISTING_FORMAT: cef_errorcode_t = -334;
pub const cef_errorcode_t_ERR_NO_SUPPORTED_PROXIES: cef_errorcode_t = -336;
pub const cef_errorcode_t_ERR_HTTP2_PROTOCOL_ERROR: cef_errorcode_t = -337;
pub const cef_errorcode_t_ERR_INVALID_AUTH_CREDENTIALS: cef_errorcode_t = -338;
pub const cef_errorcode_t_ERR_UNSUPPORTED_AUTH_SCHEME: cef_errorcode_t = -339;
pub const cef_errorcode_t_ERR_ENCODING_DETECTION_FAILED: cef_errorcode_t = -340;
pub const cef_errorcode_t_ERR_MISSING_AUTH_CREDENTIALS: cef_errorcode_t = -341;
pub const cef_errorcode_t_ERR_UNEXPECTED_SECURITY_LIBRARY_STATUS: cef_errorcode_t = -342;
pub const cef_errorcode_t_ERR_MISCONFIGURED_AUTH_ENVIRONMENT: cef_errorcode_t = -343;
pub const cef_errorcode_t_ERR_UNDOCUMENTED_SECURITY_LIBRARY_STATUS: cef_errorcode_t = -344;
pub const cef_errorcode_t_ERR_RESPONSE_BODY_TOO_BIG_TO_DRAIN: cef_errorcode_t = -345;
pub const cef_errorcode_t_ERR_RESPONSE_HEADERS_MULTIPLE_CONTENT_LENGTH: cef_errorcode_t = -346;
pub const cef_errorcode_t_ERR_INCOMPLETE_HTTP2_HEADERS: cef_errorcode_t = -347;
pub const cef_errorcode_t_ERR_PAC_NOT_IN_DHCP: cef_errorcode_t = -348;
pub const cef_errorcode_t_ERR_RESPONSE_HEADERS_MULTIPLE_CONTENT_DISPOSITION: cef_errorcode_t = -349;
pub const cef_errorcode_t_ERR_RESPONSE_HEADERS_MULTIPLE_LOCATION: cef_errorcode_t = -350;
pub const cef_errorcode_t_ERR_HTTP2_SERVER_REFUSED_STREAM: cef_errorcode_t = -351;
pub const cef_errorcode_t_ERR_HTTP2_PING_FAILED: cef_errorcode_t = -352;
pub const cef_errorcode_t_ERR_CONTENT_LENGTH_MISMATCH: cef_errorcode_t = -354;
pub const cef_errorcode_t_ERR_INCOMPLETE_CHUNKED_ENCODING: cef_errorcode_t = -355;
pub const cef_errorcode_t_ERR_QUIC_PROTOCOL_ERROR: cef_errorcode_t = -356;
pub const cef_errorcode_t_ERR_RESPONSE_HEADERS_TRUNCATED: cef_errorcode_t = -357;
pub const cef_errorcode_t_ERR_QUIC_HANDSHAKE_FAILED: cef_errorcode_t = -358;
pub const cef_errorcode_t_ERR_HTTP2_INADEQUATE_TRANSPORT_SECURITY: cef_errorcode_t = -360;
pub const cef_errorcode_t_ERR_HTTP2_FLOW_CONTROL_ERROR: cef_errorcode_t = -361;
pub const cef_errorcode_t_ERR_HTTP2_FRAME_SIZE_ERROR: cef_errorcode_t = -362;
pub const cef_errorcode_t_ERR_HTTP2_COMPRESSION_ERROR: cef_errorcode_t = -363;
pub const cef_errorcode_t_ERR_PROXY_AUTH_REQUESTED_WITH_NO_CONNECTION: cef_errorcode_t = -364;
pub const cef_errorcode_t_ERR_HTTP_1_1_REQUIRED: cef_errorcode_t = -365;
pub const cef_errorcode_t_ERR_PROXY_HTTP_1_1_REQUIRED: cef_errorcode_t = -366;
pub const cef_errorcode_t_ERR_PAC_SCRIPT_TERMINATED: cef_errorcode_t = -367;
pub const cef_errorcode_t_ERR_INVALID_HTTP_RESPONSE: cef_errorcode_t = -370;
pub const cef_errorcode_t_ERR_CONTENT_DECODING_INIT_FAILED: cef_errorcode_t = -371;
pub const cef_errorcode_t_ERR_HTTP2_RST_STREAM_NO_ERROR_RECEIVED: cef_errorcode_t = -372;
pub const cef_errorcode_t_ERR_HTTP2_PUSHED_STREAM_NOT_AVAILABLE: cef_errorcode_t = -373;
pub const cef_errorcode_t_ERR_HTTP2_CLAIMED_PUSHED_STREAM_RESET_BY_SERVER: cef_errorcode_t = -374;
pub const cef_errorcode_t_ERR_TOO_MANY_RETRIES: cef_errorcode_t = -375;
pub const cef_errorcode_t_ERR_HTTP2_STREAM_CLOSED: cef_errorcode_t = -376;
pub const cef_errorcode_t_ERR_HTTP2_CLIENT_REFUSED_STREAM: cef_errorcode_t = -377;
pub const cef_errorcode_t_ERR_HTTP2_PUSHED_RESPONSE_DOES_NOT_MATCH: cef_errorcode_t = -378;
pub const cef_errorcode_t_ERR_HTTP_RESPONSE_CODE_FAILURE: cef_errorcode_t = -379;
pub const cef_errorcode_t_ERR_QUIC_CERT_ROOT_NOT_KNOWN: cef_errorcode_t = -380;
pub const cef_errorcode_t_ERR_QUIC_GOAWAY_REQUEST_CAN_BE_RETRIED: cef_errorcode_t = -381;
pub const cef_errorcode_t_ERR_TOO_MANY_ACCEPT_CH_RESTARTS: cef_errorcode_t = -382;
pub const cef_errorcode_t_ERR_INCONSISTENT_IP_ADDRESS_SPACE: cef_errorcode_t = -383;
pub const cef_errorcode_t_ERR_CACHED_IP_ADDRESS_SPACE_BLOCKED_BY_PRIVATE_NETWORK_ACCESS_POLICY: cef_errorcode_t = -384;
pub const cef_errorcode_t_ERR_CACHE_MISS: cef_errorcode_t = -400;
pub const cef_errorcode_t_ERR_CACHE_READ_FAILURE: cef_errorcode_t = -401;
pub const cef_errorcode_t_ERR_CACHE_WRITE_FAILURE: cef_errorcode_t = -402;
pub const cef_errorcode_t_ERR_CACHE_OPERATION_NOT_SUPPORTED: cef_errorcode_t = -403;
pub const cef_errorcode_t_ERR_CACHE_OPEN_FAILURE: cef_errorcode_t = -404;
pub const cef_errorcode_t_ERR_CACHE_CREATE_FAILURE: cef_errorcode_t = -405;
pub const cef_errorcode_t_ERR_CACHE_RACE: cef_errorcode_t = -406;
pub const cef_errorcode_t_ERR_CACHE_CHECKSUM_READ_FAILURE: cef_errorcode_t = -407;
pub const cef_errorcode_t_ERR_CACHE_CHECKSUM_MISMATCH: cef_errorcode_t = -408;
pub const cef_errorcode_t_ERR_CACHE_LOCK_TIMEOUT: cef_errorcode_t = -409;
pub const cef_errorcode_t_ERR_CACHE_AUTH_FAILURE_AFTER_READ: cef_errorcode_t = -410;
pub const cef_errorcode_t_ERR_CACHE_ENTRY_NOT_SUITABLE: cef_errorcode_t = -411;
pub const cef_errorcode_t_ERR_CACHE_DOOM_FAILURE: cef_errorcode_t = -412;
pub const cef_errorcode_t_ERR_CACHE_OPEN_OR_CREATE_FAILURE: cef_errorcode_t = -413;
pub const cef_errorcode_t_ERR_INSECURE_RESPONSE: cef_errorcode_t = -501;
pub const cef_errorcode_t_ERR_NO_PRIVATE_KEY_FOR_CERT: cef_errorcode_t = -502;
pub const cef_errorcode_t_ERR_ADD_USER_CERT_FAILED: cef_errorcode_t = -503;
pub const cef_errorcode_t_ERR_INVALID_SIGNED_EXCHANGE: cef_errorcode_t = -504;
pub const cef_errorcode_t_ERR_INVALID_WEB_BUNDLE: cef_errorcode_t = -505;
pub const cef_errorcode_t_ERR_TRUST_TOKEN_OPERATION_FAILED: cef_errorcode_t = -506;
pub const cef_errorcode_t_ERR_TRUST_TOKEN_OPERATION_SUCCESS_WITHOUT_SENDING_REQUEST: cef_errorcode_t = -507;
pub const cef_errorcode_t_ERR_FTP_FAILED: cef_errorcode_t = -601;
pub const cef_errorcode_t_ERR_FTP_SERVICE_UNAVAILABLE: cef_errorcode_t = -602;
pub const cef_errorcode_t_ERR_FTP_TRANSFER_ABORTED: cef_errorcode_t = -603;
pub const cef_errorcode_t_ERR_FTP_FILE_BUSY: cef_errorcode_t = -604;
pub const cef_errorcode_t_ERR_FTP_SYNTAX_ERROR: cef_errorcode_t = -605;
pub const cef_errorcode_t_ERR_FTP_COMMAND_NOT_SUPPORTED: cef_errorcode_t = -606;
pub const cef_errorcode_t_ERR_FTP_BAD_COMMAND_SEQUENCE: cef_errorcode_t = -607;
pub const cef_errorcode_t_ERR_PKCS12_IMPORT_BAD_PASSWORD: cef_errorcode_t = -701;
pub const cef_errorcode_t_ERR_PKCS12_IMPORT_FAILED: cef_errorcode_t = -702;
pub const cef_errorcode_t_ERR_IMPORT_CA_CERT_NOT_CA: cef_errorcode_t = -703;
pub const cef_errorcode_t_ERR_IMPORT_CERT_ALREADY_EXISTS: cef_errorcode_t = -704;
pub const cef_errorcode_t_ERR_IMPORT_CA_CERT_FAILED: cef_errorcode_t = -705;
pub const cef_errorcode_t_ERR_IMPORT_SERVER_CERT_FAILED: cef_errorcode_t = -706;
pub const cef_errorcode_t_ERR_PKCS12_IMPORT_INVALID_MAC: cef_errorcode_t = -707;
pub const cef_errorcode_t_ERR_PKCS12_IMPORT_INVALID_FILE: cef_errorcode_t = -708;
pub const cef_errorcode_t_ERR_PKCS12_IMPORT_UNSUPPORTED: cef_errorcode_t = -709;
pub const cef_errorcode_t_ERR_KEY_GENERATION_FAILED: cef_errorcode_t = -710;
pub const cef_errorcode_t_ERR_PRIVATE_KEY_EXPORT_FAILED: cef_errorcode_t = -712;
pub const cef_errorcode_t_ERR_SELF_SIGNED_CERT_GENERATION_FAILED: cef_errorcode_t = -713;
pub const cef_errorcode_t_ERR_CERT_DATABASE_CHANGED: cef_errorcode_t = -714;
pub const cef_errorcode_t_ERR_DNS_MALFORMED_RESPONSE: cef_errorcode_t = -800;
pub const cef_errorcode_t_ERR_DNS_SERVER_REQUIRES_TCP: cef_errorcode_t = -801;
pub const cef_errorcode_t_ERR_DNS_SERVER_FAILED: cef_errorcode_t = -802;
pub const cef_errorcode_t_ERR_DNS_TIMED_OUT: cef_errorcode_t = -803;
pub const cef_errorcode_t_ERR_DNS_CACHE_MISS: cef_errorcode_t = -804;
pub const cef_errorcode_t_ERR_DNS_SEARCH_EMPTY: cef_errorcode_t = -805;
pub const cef_errorcode_t_ERR_DNS_SORT_ERROR: cef_errorcode_t = -806;
pub const cef_errorcode_t_ERR_DNS_SECURE_RESOLVER_HOSTNAME_RESOLUTION_FAILED: cef_errorcode_t = -808;
pub const cef_errorcode_t_ERR_DNS_NAME_HTTPS_ONLY: cef_errorcode_t = -809;
pub const cef_errorcode_t_ERR_DNS_REQUEST_CANCELLED: cef_errorcode_t = -810;
pub const cef_errorcode_t_ERR_DNS_NO_MACHING_SUPPORTED_ALPN: cef_errorcode_t = -811;
pub type cef_errorcode_t = ::std::os::raw::c_int;
pub const cef_cert_status_t_CERT_STATUS_NONE: cef_cert_status_t = 0;
pub const cef_cert_status_t_CERT_STATUS_COMMON_NAME_INVALID: cef_cert_status_t = 1;
pub const cef_cert_status_t_CERT_STATUS_DATE_INVALID: cef_cert_status_t = 2;
pub const cef_cert_status_t_CERT_STATUS_AUTHORITY_INVALID: cef_cert_status_t = 4;
pub const cef_cert_status_t_CERT_STATUS_NO_REVOCATION_MECHANISM: cef_cert_status_t = 16;
pub const cef_cert_status_t_CERT_STATUS_UNABLE_TO_CHECK_REVOCATION: cef_cert_status_t = 32;
pub const cef_cert_status_t_CERT_STATUS_REVOKED: cef_cert_status_t = 64;
pub const cef_cert_status_t_CERT_STATUS_INVALID: cef_cert_status_t = 128;
pub const cef_cert_status_t_CERT_STATUS_WEAK_SIGNATURE_ALGORITHM: cef_cert_status_t = 256;
pub const cef_cert_status_t_CERT_STATUS_NON_UNIQUE_NAME: cef_cert_status_t = 1024;
pub const cef_cert_status_t_CERT_STATUS_WEAK_KEY: cef_cert_status_t = 2048;
pub const cef_cert_status_t_CERT_STATUS_PINNED_KEY_MISSING: cef_cert_status_t = 8192;
pub const cef_cert_status_t_CERT_STATUS_NAME_CONSTRAINT_VIOLATION: cef_cert_status_t = 16384;
pub const cef_cert_status_t_CERT_STATUS_VALIDITY_TOO_LONG: cef_cert_status_t = 32768;
pub const cef_cert_status_t_CERT_STATUS_IS_EV: cef_cert_status_t = 65536;
pub const cef_cert_status_t_CERT_STATUS_REV_CHECKING_ENABLED: cef_cert_status_t = 131072;
pub const cef_cert_status_t_CERT_STATUS_SHA1_SIGNATURE_PRESENT: cef_cert_status_t = 524288;
pub const cef_cert_status_t_CERT_STATUS_CT_COMPLIANCE_FAILED: cef_cert_status_t = 1048576;
pub type cef_cert_status_t = ::std::os::raw::c_uint;
pub const cef_drag_operations_mask_t_DRAG_OPERATION_NONE: cef_drag_operations_mask_t = 0;
pub const cef_drag_operations_mask_t_DRAG_OPERATION_COPY: cef_drag_operations_mask_t = 1;
pub const cef_drag_operations_mask_t_DRAG_OPERATION_LINK: cef_drag_operations_mask_t = 2;
pub const cef_drag_operations_mask_t_DRAG_OPERATION_GENERIC: cef_drag_operations_mask_t = 4;
pub const cef_drag_operations_mask_t_DRAG_OPERATION_PRIVATE: cef_drag_operations_mask_t = 8;
pub const cef_drag_operations_mask_t_DRAG_OPERATION_MOVE: cef_drag_operations_mask_t = 16;
pub const cef_drag_operations_mask_t_DRAG_OPERATION_DELETE: cef_drag_operations_mask_t = 32;
pub const cef_drag_operations_mask_t_DRAG_OPERATION_EVERY: cef_drag_operations_mask_t = 4294967295;
pub type cef_drag_operations_mask_t = ::std::os::raw::c_uint;
pub const cef_postdataelement_type_t_PDE_TYPE_EMPTY: cef_postdataelement_type_t = 0;
pub const cef_postdataelement_type_t_PDE_TYPE_BYTES: cef_postdataelement_type_t = 1;
pub const cef_postdataelement_type_t_PDE_TYPE_FILE: cef_postdataelement_type_t = 2;
pub type cef_postdataelement_type_t = ::std::os::raw::c_uint;
pub const cef_resource_type_t_RT_MAIN_FRAME: cef_resource_type_t = 0;
pub const cef_resource_type_t_RT_SUB_FRAME: cef_resource_type_t = 1;
pub const cef_resource_type_t_RT_STYLESHEET: cef_resource_type_t = 2;
pub const cef_resource_type_t_RT_SCRIPT: cef_resource_type_t = 3;
pub const cef_resource_type_t_RT_IMAGE: cef_resource_type_t = 4;
pub const cef_resource_type_t_RT_FONT_RESOURCE: cef_resource_type_t = 5;
pub const cef_resource_type_t_RT_SUB_RESOURCE: cef_resource_type_t = 6;
pub const cef_resource_type_t_RT_OBJECT: cef_resource_type_t = 7;
pub const cef_resource_type_t_RT_MEDIA: cef_resource_type_t = 8;
pub const cef_resource_type_t_RT_WORKER: cef_resource_type_t = 9;
pub const cef_resource_type_t_RT_SHARED_WORKER: cef_resource_type_t = 10;
pub const cef_resource_type_t_RT_PREFETCH: cef_resource_type_t = 11;
pub const cef_resource_type_t_RT_FAVICON: cef_resource_type_t = 12;
pub const cef_resource_type_t_RT_XHR: cef_resource_type_t = 13;
pub const cef_resource_type_t_RT_PING: cef_resource_type_t = 14;
pub const cef_resource_type_t_RT_SERVICE_WORKER: cef_resource_type_t = 15;
pub const cef_resource_type_t_RT_CSP_REPORT: cef_resource_type_t = 16;
pub const cef_resource_type_t_RT_PLUGIN_RESOURCE: cef_resource_type_t = 17;
pub const cef_resource_type_t_RT_NAVIGATION_PRELOAD_MAIN_FRAME: cef_resource_type_t = 19;
pub const cef_resource_type_t_RT_NAVIGATION_PRELOAD_SUB_FRAME: cef_resource_type_t = 20;
pub type cef_resource_type_t = ::std::os::raw::c_uint;
pub const cef_transition_type_t_TT_LINK: cef_transition_type_t = 0;
pub const cef_transition_type_t_TT_EXPLICIT: cef_transition_type_t = 1;
pub const cef_transition_type_t_TT_AUTO_BOOKMARK: cef_transition_type_t = 2;
pub const cef_transition_type_t_TT_AUTO_SUBFRAME: cef_transition_type_t = 3;
pub const cef_transition_type_t_TT_MANUAL_SUBFRAME: cef_transition_type_t = 4;
pub const cef_transition_type_t_TT_GENERATED: cef_transition_type_t = 5;
pub const cef_transition_type_t_TT_AUTO_TOPLEVEL: cef_transition_type_t = 6;
pub const cef_transition_type_t_TT_FORM_SUBMIT: cef_transition_type_t = 7;
pub const cef_transition_type_t_TT_RELOAD: cef_transition_type_t = 8;
pub const cef_transition_type_t_TT_KEYWORD: cef_transition_type_t = 9;
pub const cef_transition_type_t_TT_KEYWORD_GENERATED: cef_transition_type_t = 10;
pub const cef_transition_type_t_TT_SOURCE_MASK: cef_transition_type_t = 255;
pub const cef_transition_type_t_TT_BLOCKED_FLAG: cef_transition_type_t = 8388608;
pub const cef_transition_type_t_TT_FORWARD_BACK_FLAG: cef_transition_type_t = 16777216;
pub const cef_transition_type_t_TT_DIRECT_LOAD_FLAG: cef_transition_type_t = 33554432;
pub const cef_transition_type_t_TT_HOME_PAGE_FLAG: cef_transition_type_t = 67108864;
pub const cef_transition_type_t_TT_FROM_API_FLAG: cef_transition_type_t = 134217728;
pub const cef_transition_type_t_TT_CHAIN_START_FLAG: cef_transition_type_t = 268435456;
pub const cef_transition_type_t_TT_CHAIN_END_FLAG: cef_transition_type_t = 536870912;
pub const cef_transition_type_t_TT_CLIENT_REDIRECT_FLAG: cef_transition_type_t = 1073741824;
pub const cef_transition_type_t_TT_SERVER_REDIRECT_FLAG: cef_transition_type_t = 2147483648;
pub const cef_transition_type_t_TT_IS_REDIRECT_MASK: cef_transition_type_t = 3221225472;
pub const cef_transition_type_t_TT_QUALIFIER_MASK: cef_transition_type_t = 4294967040;
pub type cef_transition_type_t = ::std::os::raw::c_uint;
pub const cef_urlrequest_status_t_UR_UNKNOWN: cef_urlrequest_status_t = 0;
pub const cef_urlrequest_status_t_UR_SUCCESS: cef_urlrequest_status_t = 1;
pub const cef_urlrequest_status_t_UR_IO_PENDING: cef_urlrequest_status_t = 2;
pub const cef_urlrequest_status_t_UR_CANCELED: cef_urlrequest_status_t = 3;
pub const cef_urlrequest_status_t_UR_FAILED: cef_urlrequest_status_t = 4;
pub type cef_urlrequest_status_t = ::std::os::raw::c_uint;
pub const cef_process_id_t_PID_BROWSER: cef_process_id_t = 0;
pub const cef_process_id_t_PID_RENDERER: cef_process_id_t = 1;
pub type cef_process_id_t = ::std::os::raw::c_uint;
pub const cef_value_type_t_VTYPE_INVALID: cef_value_type_t = 0;
pub const cef_value_type_t_VTYPE_NULL: cef_value_type_t = 1;
pub const cef_value_type_t_VTYPE_BOOL: cef_value_type_t = 2;
pub const cef_value_type_t_VTYPE_INT: cef_value_type_t = 3;
pub const cef_value_type_t_VTYPE_DOUBLE: cef_value_type_t = 4;
pub const cef_value_type_t_VTYPE_STRING: cef_value_type_t = 5;
pub const cef_value_type_t_VTYPE_BINARY: cef_value_type_t = 6;
pub const cef_value_type_t_VTYPE_DICTIONARY: cef_value_type_t = 7;
pub const cef_value_type_t_VTYPE_LIST: cef_value_type_t = 8;
pub type cef_value_type_t = ::std::os::raw::c_uint;
pub const cef_mouse_button_type_t_MBT_LEFT: cef_mouse_button_type_t = 0;
pub const cef_mouse_button_type_t_MBT_MIDDLE: cef_mouse_button_type_t = 1;
pub const cef_mouse_button_type_t_MBT_RIGHT: cef_mouse_button_type_t = 2;
pub type cef_mouse_button_type_t = ::std::os::raw::c_uint;
#[repr(C)]
pub struct _cef_mouse_event_t {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub modifiers: uint32,
}
pub type cef_mouse_event_t = _cef_mouse_event_t;
pub const cef_touch_event_type_t_CEF_TET_RELEASED: cef_touch_event_type_t = 0;
pub const cef_touch_event_type_t_CEF_TET_PRESSED: cef_touch_event_type_t = 1;
pub const cef_touch_event_type_t_CEF_TET_MOVED: cef_touch_event_type_t = 2;
pub const cef_touch_event_type_t_CEF_TET_CANCELLED: cef_touch_event_type_t = 3;
pub type cef_touch_event_type_t = ::std::os::raw::c_uint;
pub const cef_pointer_type_t_CEF_POINTER_TYPE_TOUCH: cef_pointer_type_t = 0;
pub const cef_pointer_type_t_CEF_POINTER_TYPE_MOUSE: cef_pointer_type_t = 1;
pub const cef_pointer_type_t_CEF_POINTER_TYPE_PEN: cef_pointer_type_t = 2;
pub const cef_pointer_type_t_CEF_POINTER_TYPE_ERASER: cef_pointer_type_t = 3;
pub const cef_pointer_type_t_CEF_POINTER_TYPE_UNKNOWN: cef_pointer_type_t = 4;
pub type cef_pointer_type_t = ::std::os::raw::c_uint;
#[repr(C)]
pub struct _cef_touch_event_t {
    pub id: ::std::os::raw::c_int,
    pub x: f32,
    pub y: f32,
    pub radius_x: f32,
    pub radius_y: f32,
    pub rotation_angle: f32,
    pub pressure: f32,
    pub type_: cef_touch_event_type_t,
    pub modifiers: uint32,
    pub pointer_type: cef_pointer_type_t,
}
pub type cef_touch_event_t = _cef_touch_event_t;
pub const cef_paint_element_type_t_PET_VIEW: cef_paint_element_type_t = 0;
pub const cef_paint_element_type_t_PET_POPUP: cef_paint_element_type_t = 1;
pub type cef_paint_element_type_t = ::std::os::raw::c_uint;
pub const cef_key_event_type_t_KEYEVENT_RAWKEYDOWN: cef_key_event_type_t = 0;
pub const cef_key_event_type_t_KEYEVENT_KEYDOWN: cef_key_event_type_t = 1;
pub const cef_key_event_type_t_KEYEVENT_KEYUP: cef_key_event_type_t = 2;
pub const cef_key_event_type_t_KEYEVENT_CHAR: cef_key_event_type_t = 3;
pub type cef_key_event_type_t = ::std::os::raw::c_uint;
#[repr(C)]
pub struct _cef_key_event_t {
    pub type_: cef_key_event_type_t,
    pub modifiers: uint32,
    pub windows_key_code: ::std::os::raw::c_int,
    pub native_key_code: ::std::os::raw::c_int,
    pub is_system_key: ::std::os::raw::c_int,
    pub character: char16,
    pub unmodified_character: char16,
    pub focus_on_editable_field: ::std::os::raw::c_int,
}
pub type cef_key_event_t = _cef_key_event_t;
pub const cef_dom_document_type_t_DOM_DOCUMENT_TYPE_UNKNOWN: cef_dom_document_type_t = 0;
pub const cef_dom_document_type_t_DOM_DOCUMENT_TYPE_HTML: cef_dom_document_type_t = 1;
pub const cef_dom_document_type_t_DOM_DOCUMENT_TYPE_XHTML: cef_dom_document_type_t = 2;
pub const cef_dom_document_type_t_DOM_DOCUMENT_TYPE_PLUGIN: cef_dom_document_type_t = 3;
pub type cef_dom_document_type_t = ::std::os::raw::c_uint;
pub const cef_dom_node_type_t_DOM_NODE_TYPE_UNSUPPORTED: cef_dom_node_type_t = 0;
pub const cef_dom_node_type_t_DOM_NODE_TYPE_ELEMENT: cef_dom_node_type_t = 1;
pub const cef_dom_node_type_t_DOM_NODE_TYPE_ATTRIBUTE: cef_dom_node_type_t = 2;
pub const cef_dom_node_type_t_DOM_NODE_TYPE_TEXT: cef_dom_node_type_t = 3;
pub const cef_dom_node_type_t_DOM_NODE_TYPE_CDATA_SECTION: cef_dom_node_type_t = 4;
pub const cef_dom_node_type_t_DOM_NODE_TYPE_PROCESSING_INSTRUCTIONS: cef_dom_node_type_t = 5;
pub const cef_dom_node_type_t_DOM_NODE_TYPE_COMMENT: cef_dom_node_type_t = 6;
pub const cef_dom_node_type_t_DOM_NODE_TYPE_DOCUMENT: cef_dom_node_type_t = 7;
pub const cef_dom_node_type_t_DOM_NODE_TYPE_DOCUMENT_TYPE: cef_dom_node_type_t = 8;
pub const cef_dom_node_type_t_DOM_NODE_TYPE_DOCUMENT_FRAGMENT: cef_dom_node_type_t = 9;
pub type cef_dom_node_type_t = ::std::os::raw::c_uint;
pub const cef_file_dialog_mode_t_FILE_DIALOG_OPEN: cef_file_dialog_mode_t = 0;
pub const cef_file_dialog_mode_t_FILE_DIALOG_OPEN_MULTIPLE: cef_file_dialog_mode_t = 1;
pub const cef_file_dialog_mode_t_FILE_DIALOG_OPEN_FOLDER: cef_file_dialog_mode_t = 2;
pub const cef_file_dialog_mode_t_FILE_DIALOG_SAVE: cef_file_dialog_mode_t = 3;
pub type cef_file_dialog_mode_t = ::std::os::raw::c_uint;
pub const cef_pdf_print_margin_type_t_PDF_PRINT_MARGIN_DEFAULT: cef_pdf_print_margin_type_t = 0;
pub const cef_pdf_print_margin_type_t_PDF_PRINT_MARGIN_NONE: cef_pdf_print_margin_type_t = 1;
pub const cef_pdf_print_margin_type_t_PDF_PRINT_MARGIN_MINIMUM: cef_pdf_print_margin_type_t = 2;
pub const cef_pdf_print_margin_type_t_PDF_PRINT_MARGIN_CUSTOM: cef_pdf_print_margin_type_t = 3;
pub type cef_pdf_print_margin_type_t = ::std::os::raw::c_uint;
#[repr(C)]
pub struct _cef_pdf_print_settings_t {
    pub header_footer_title: cef_string_t,
    pub header_footer_url: cef_string_t,
    pub page_width: ::std::os::raw::c_int,
    pub page_height: ::std::os::raw::c_int,
    pub scale_factor: ::std::os::raw::c_int,
    pub margin_top: ::std::os::raw::c_int,
    pub margin_right: ::std::os::raw::c_int,
    pub margin_bottom: ::std::os::raw::c_int,
    pub margin_left: ::std::os::raw::c_int,
    pub margin_type: cef_pdf_print_margin_type_t,
    pub header_footer_enabled: ::std::os::raw::c_int,
    pub selection_only: ::std::os::raw::c_int,
    pub landscape: ::std::os::raw::c_int,
    pub backgrounds_enabled: ::std::os::raw::c_int,
}
pub const cef_referrer_policy_t_REFERRER_POLICY_CLEAR_REFERRER_ON_TRANSITION_FROM_SECURE_TO_INSECURE:
    cef_referrer_policy_t = 0;
pub const cef_referrer_policy_t_REFERRER_POLICY_DEFAULT: cef_referrer_policy_t = 0;
pub const cef_referrer_policy_t_REFERRER_POLICY_REDUCE_REFERRER_GRANULARITY_ON_TRANSITION_CROSS_ORIGIN:
    cef_referrer_policy_t = 1;
pub const cef_referrer_policy_t_REFERRER_POLICY_ORIGIN_ONLY_ON_TRANSITION_CROSS_ORIGIN: cef_referrer_policy_t = 2;
pub const cef_referrer_policy_t_REFERRER_POLICY_NEVER_CLEAR_REFERRER: cef_referrer_policy_t = 3;
pub const cef_referrer_policy_t_REFERRER_POLICY_ORIGIN: cef_referrer_policy_t = 4;
pub const cef_referrer_policy_t_REFERRER_POLICY_CLEAR_REFERRER_ON_TRANSITION_CROSS_ORIGIN: cef_referrer_policy_t = 5;
pub const cef_referrer_policy_t_REFERRER_POLICY_ORIGIN_CLEAR_ON_TRANSITION_FROM_SECURE_TO_INSECURE:
    cef_referrer_policy_t = 6;
pub const cef_referrer_policy_t_REFERRER_POLICY_NO_REFERRER: cef_referrer_policy_t = 7;
pub const cef_referrer_policy_t_REFERRER_POLICY_LAST_VALUE: cef_referrer_policy_t = 7;
pub type cef_referrer_policy_t = ::std::os::raw::c_uint;
pub const cef_color_type_t_CEF_COLOR_TYPE_RGBA_8888: cef_color_type_t = 0;
pub const cef_color_type_t_CEF_COLOR_TYPE_BGRA_8888: cef_color_type_t = 1;
pub type cef_color_type_t = ::std::os::raw::c_uint;
pub const cef_alpha_type_t_CEF_ALPHA_TYPE_OPAQUE: cef_alpha_type_t = 0;
pub const cef_alpha_type_t_CEF_ALPHA_TYPE_PREMULTIPLIED: cef_alpha_type_t = 1;
pub const cef_alpha_type_t_CEF_ALPHA_TYPE_POSTMULTIPLIED: cef_alpha_type_t = 2;
pub type cef_alpha_type_t = ::std::os::raw::c_uint;
pub const cef_ssl_version_t_SSL_CONNECTION_VERSION_UNKNOWN: cef_ssl_version_t = 0;
pub const cef_ssl_version_t_SSL_CONNECTION_VERSION_SSL2: cef_ssl_version_t = 1;
pub const cef_ssl_version_t_SSL_CONNECTION_VERSION_SSL3: cef_ssl_version_t = 2;
pub const cef_ssl_version_t_SSL_CONNECTION_VERSION_TLS1: cef_ssl_version_t = 3;
pub const cef_ssl_version_t_SSL_CONNECTION_VERSION_TLS1_1: cef_ssl_version_t = 4;
pub const cef_ssl_version_t_SSL_CONNECTION_VERSION_TLS1_2: cef_ssl_version_t = 5;
pub const cef_ssl_version_t_SSL_CONNECTION_VERSION_TLS1_3: cef_ssl_version_t = 6;
pub const cef_ssl_version_t_SSL_CONNECTION_VERSION_QUIC: cef_ssl_version_t = 7;
pub type cef_ssl_version_t = ::std::os::raw::c_uint;
pub const cef_ssl_content_status_t_SSL_CONTENT_NORMAL_CONTENT: cef_ssl_content_status_t = 0;
pub const cef_ssl_content_status_t_SSL_CONTENT_DISPLAYED_INSECURE_CONTENT: cef_ssl_content_status_t = 1;
pub const cef_ssl_content_status_t_SSL_CONTENT_RAN_INSECURE_CONTENT: cef_ssl_content_status_t = 2;
pub type cef_ssl_content_status_t = ::std::os::raw::c_uint;
#[repr(C)]
pub struct _cef_range_t {
    pub from: ::std::os::raw::c_int,
    pub to: ::std::os::raw::c_int,
}
pub type cef_range_t = _cef_range_t;
pub const cef_composition_underline_style_t_CEF_CUS_SOLID: cef_composition_underline_style_t = 0;
pub const cef_composition_underline_style_t_CEF_CUS_DOT: cef_composition_underline_style_t = 1;
pub const cef_composition_underline_style_t_CEF_CUS_DASH: cef_composition_underline_style_t = 2;
pub const cef_composition_underline_style_t_CEF_CUS_NONE: cef_composition_underline_style_t = 3;
pub type cef_composition_underline_style_t = ::std::os::raw::c_uint;
#[repr(C)]
pub struct _cef_composition_underline_t {
    pub range: cef_range_t,
    pub color: cef_color_t,
    pub background_color: cef_color_t,
    pub thick: ::std::os::raw::c_int,
    pub style: cef_composition_underline_style_t,
}
pub type cef_composition_underline_t = _cef_composition_underline_t;
pub const cef_media_route_create_result_t_CEF_MRCR_UNKNOWN_ERROR: cef_media_route_create_result_t = 0;
pub const cef_media_route_create_result_t_CEF_MRCR_OK: cef_media_route_create_result_t = 1;
pub const cef_media_route_create_result_t_CEF_MRCR_TIMED_OUT: cef_media_route_create_result_t = 2;
pub const cef_media_route_create_result_t_CEF_MRCR_ROUTE_NOT_FOUND: cef_media_route_create_result_t = 3;
pub const cef_media_route_create_result_t_CEF_MRCR_SINK_NOT_FOUND: cef_media_route_create_result_t = 4;
pub const cef_media_route_create_result_t_CEF_MRCR_INVALID_ORIGIN: cef_media_route_create_result_t = 5;
pub const cef_media_route_create_result_t_CEF_MRCR_NO_SUPPORTED_PROVIDER: cef_media_route_create_result_t = 7;
pub const cef_media_route_create_result_t_CEF_MRCR_CANCELLED: cef_media_route_create_result_t = 8;
pub const cef_media_route_create_result_t_CEF_MRCR_ROUTE_ALREADY_EXISTS: cef_media_route_create_result_t = 9;
pub const cef_media_route_create_result_t_CEF_MRCR_ROUTE_ALREADY_TERMINATED: cef_media_route_create_result_t = 11;
pub type cef_media_route_create_result_t = ::std::os::raw::c_uint;
pub const cef_media_route_connection_state_t_CEF_MRCS_UNKNOWN: cef_media_route_connection_state_t = 0;
pub const cef_media_route_connection_state_t_CEF_MRCS_CONNECTING: cef_media_route_connection_state_t = 1;
pub const cef_media_route_connection_state_t_CEF_MRCS_CONNECTED: cef_media_route_connection_state_t = 2;
pub const cef_media_route_connection_state_t_CEF_MRCS_CLOSED: cef_media_route_connection_state_t = 3;
pub const cef_media_route_connection_state_t_CEF_MRCS_TERMINATED: cef_media_route_connection_state_t = 4;
pub type cef_media_route_connection_state_t = ::std::os::raw::c_uint;
pub const cef_media_sink_icon_type_t_CEF_MSIT_CAST: cef_media_sink_icon_type_t = 0;
pub const cef_media_sink_icon_type_t_CEF_MSIT_CAST_AUDIO_GROUP: cef_media_sink_icon_type_t = 1;
pub const cef_media_sink_icon_type_t_CEF_MSIT_CAST_AUDIO: cef_media_sink_icon_type_t = 2;
pub const cef_media_sink_icon_type_t_CEF_MSIT_MEETING: cef_media_sink_icon_type_t = 3;
pub const cef_media_sink_icon_type_t_CEF_MSIT_HANGOUT: cef_media_sink_icon_type_t = 4;
pub const cef_media_sink_icon_type_t_CEF_MSIT_EDUCATION: cef_media_sink_icon_type_t = 5;
pub const cef_media_sink_icon_type_t_CEF_MSIT_WIRED_DISPLAY: cef_media_sink_icon_type_t = 6;
pub const cef_media_sink_icon_type_t_CEF_MSIT_GENERIC: cef_media_sink_icon_type_t = 7;
pub const cef_media_sink_icon_type_t_CEF_MSIT_TOTAL_COUNT: cef_media_sink_icon_type_t = 8;
pub type cef_media_sink_icon_type_t = ::std::os::raw::c_uint;
#[repr(C)]
pub struct _cef_media_sink_device_info_t {
    pub ip_address: cef_string_t,
    pub port: ::std::os::raw::c_int,
    pub model_name: cef_string_t,
}
#[repr(C)]
pub struct _cef_base_ref_counted_t {
    pub size: usize,
    pub add_ref: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_base_ref_counted_t)>,
    pub release:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_base_ref_counted_t) -> ::std::os::raw::c_int>,
    pub has_one_ref:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_base_ref_counted_t) -> ::std::os::raw::c_int>,
    pub has_at_least_one_ref:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_base_ref_counted_t) -> ::std::os::raw::c_int>,
}
pub type cef_base_ref_counted_t = _cef_base_ref_counted_t;
#[repr(C)]
pub struct _cef_auth_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_auth_callback_t,
            username: *const cef_string_t,
            password: *const cef_string_t,
        ),
    >,
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_auth_callback_t)>,
}
#[repr(C)]
pub struct _cef_request_t {
    pub base: cef_base_ref_counted_t,
    pub is_read_only: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t) -> ::std::os::raw::c_int>,
    pub get_url: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t>,
    pub set_url: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t, url: *const cef_string_t)>,
    pub get_method: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t>,
    pub set_method:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t, method: *const cef_string_t)>,
    pub set_referrer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_t,
            referrer_url: *const cef_string_t,
            policy: cef_referrer_policy_t,
        ),
    >,
    pub get_referrer_url:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t>,
    pub get_referrer_policy:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_referrer_policy_t>,
    pub get_post_data: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t) -> *mut _cef_post_data_t>,
    pub set_post_data:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t, postData: *mut _cef_post_data_t)>,
    pub get_header_map:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t, headerMap: cef_string_multimap_t)>,
    pub set_header_map:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t, headerMap: cef_string_multimap_t)>,
    pub get_header_by_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, name: *const cef_string_t) -> cef_string_userfree_t,
    >,
    pub set_header_by_name: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_t,
            name: *const cef_string_t,
            value: *const cef_string_t,
            overwrite: ::std::os::raw::c_int,
        ),
    >,
    pub set: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_t,
            url: *const cef_string_t,
            method: *const cef_string_t,
            postData: *mut _cef_post_data_t,
            headerMap: cef_string_multimap_t,
        ),
    >,
    pub get_flags: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t) -> ::std::os::raw::c_int>,
    pub set_flags:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t, flags: ::std::os::raw::c_int)>,
    pub get_first_party_for_cookies:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t>,
    pub set_first_party_for_cookies:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t, url: *const cef_string_t)>,
    pub get_resource_type:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_resource_type_t>,
    pub get_transition_type:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_transition_type_t>,
    pub get_identifier: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t) -> uint64>,
}
#[repr(C)]
pub struct _cef_post_data_t {
    pub base: cef_base_ref_counted_t,
    pub is_read_only:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_t) -> ::std::os::raw::c_int>,
    pub has_excluded_elements:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_t) -> ::std::os::raw::c_int>,
    pub get_element_count: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_t) -> usize>,
    pub get_elements: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_t,
            elementsCount: *mut usize,
            elements: *mut *mut _cef_post_data_element_t,
        ),
    >,
    pub remove_element: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_t,
            element: *mut _cef_post_data_element_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_element: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_t,
            element: *mut _cef_post_data_element_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub remove_elements: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_t)>,
}
#[repr(C)]
pub struct _cef_post_data_element_t {
    pub base: cef_base_ref_counted_t,
    pub is_read_only:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_element_t) -> ::std::os::raw::c_int>,
    pub set_to_empty: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_element_t)>,
    pub set_to_file: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_post_data_element_t, fileName: *const cef_string_t),
    >,
    pub set_to_bytes: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_post_data_element_t, size: usize, bytes: *const ::std::os::raw::c_void),
    >,
    pub get_type:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_element_t) -> cef_postdataelement_type_t>,
    pub get_file:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_element_t) -> cef_string_userfree_t>,
    pub get_bytes_count: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_element_t) -> usize>,
    pub get_bytes: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_element_t,
            size: usize,
            bytes: *mut ::std::os::raw::c_void,
        ) -> usize,
    >,
}
#[repr(C)]
pub struct _cef_completion_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_complete: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_completion_callback_t)>,
}
#[repr(C)]
pub struct _cef_cookie_manager_t {
    pub base: cef_base_ref_counted_t,
    pub visit_all_cookies: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            visitor: *mut _cef_cookie_visitor_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub visit_url_cookies: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            url: *const cef_string_t,
            includeHttpOnly: ::std::os::raw::c_int,
            visitor: *mut _cef_cookie_visitor_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_cookie: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            url: *const cef_string_t,
            cookie: *const _cef_cookie_t,
            callback: *mut _cef_set_cookie_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub delete_cookies: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            url: *const cef_string_t,
            cookie_name: *const cef_string_t,
            callback: *mut _cef_delete_cookies_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub flush_store: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            callback: *mut _cef_completion_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[repr(C)]
pub struct _cef_cookie_visitor_t {
    pub base: cef_base_ref_counted_t,
    pub visit: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_visitor_t,
            cookie: *const _cef_cookie_t,
            count: ::std::os::raw::c_int,
            total: ::std::os::raw::c_int,
            deleteCookie: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
#[repr(C)]
pub struct _cef_set_cookie_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_complete: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_set_cookie_callback_t, success: ::std::os::raw::c_int),
    >,
}
#[repr(C)]
pub struct _cef_delete_cookies_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_complete: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_delete_cookies_callback_t, num_deleted: ::std::os::raw::c_int),
    >,
}
#[repr(C)]
pub struct _cef_value_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int>,
    pub is_owned: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int>,
    pub is_read_only: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int>,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t, that: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_equal: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t, that: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    pub copy: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> *mut _cef_value_t>,
    pub get_type: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> cef_value_type_t>,
    pub get_bool: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int>,
    pub get_int: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int>,
    pub get_double: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> f64>,
    pub get_string: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> cef_string_userfree_t>,
    pub get_binary: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> *mut _cef_binary_value_t>,
    pub get_dictionary:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> *mut _cef_dictionary_value_t>,
    pub get_list: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> *mut _cef_list_value_t>,
    pub set_null: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int>,
    pub set_bool: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t, value: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub set_int: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t, value: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub set_double:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t, value: f64) -> ::std::os::raw::c_int>,
    pub set_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t, value: *const cef_string_t) -> ::std::os::raw::c_int,
    >,
    pub set_binary: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t, value: *mut _cef_binary_value_t) -> ::std::os::raw::c_int,
    >,
    pub set_dictionary: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t, value: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int,
    >,
    pub set_list: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t, value: *mut _cef_list_value_t) -> ::std::os::raw::c_int,
    >,
}
#[repr(C)]
pub struct _cef_binary_value_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_binary_value_t) -> ::std::os::raw::c_int>,
    pub is_owned: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_binary_value_t) -> ::std::os::raw::c_int>,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_binary_value_t, that: *mut _cef_binary_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_equal: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_binary_value_t, that: *mut _cef_binary_value_t) -> ::std::os::raw::c_int,
    >,
    pub copy: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_binary_value_t) -> *mut _cef_binary_value_t>,
    pub get_size: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_binary_value_t) -> usize>,
    pub get_data: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_binary_value_t,
            buffer: *mut ::std::os::raw::c_void,
            buffer_size: usize,
            data_offset: usize,
        ) -> usize,
    >,
}
#[repr(C)]
pub struct _cef_dictionary_value_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int>,
    pub is_owned:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int>,
    pub is_read_only:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int>,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            that: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_equal: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            that: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            exclude_empty_children: ::std::os::raw::c_int,
        ) -> *mut _cef_dictionary_value_t,
    >,
    pub get_size: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> usize>,
    pub clear:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int>,
    pub has_key: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t, key: *const cef_string_t) -> ::std::os::raw::c_int,
    >,
    pub get_keys: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t, keys: cef_string_list_t) -> ::std::os::raw::c_int,
    >,
    pub remove: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t, key: *const cef_string_t) -> ::std::os::raw::c_int,
    >,
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t, key: *const cef_string_t) -> cef_value_type_t,
    >,
    pub get_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t, key: *const cef_string_t) -> *mut _cef_value_t,
    >,
    pub get_bool: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t, key: *const cef_string_t) -> ::std::os::raw::c_int,
    >,
    pub get_int: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t, key: *const cef_string_t) -> ::std::os::raw::c_int,
    >,
    pub get_double: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t, key: *const cef_string_t) -> f64,
    >,
    pub get_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t, key: *const cef_string_t) -> cef_string_userfree_t,
    >,
    pub get_binary: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t, key: *const cef_string_t) -> *mut _cef_binary_value_t,
    >,
    pub get_dictionary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> *mut _cef_dictionary_value_t,
    >,
    pub get_list: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t, key: *const cef_string_t) -> *mut _cef_list_value_t,
    >,
    pub set_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_null: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t, key: *const cef_string_t) -> ::std::os::raw::c_int,
    >,
    pub set_bool: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_int: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_double: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: f64,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_binary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_binary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_dictionary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_list: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_list_value_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[repr(C)]
pub struct _cef_list_value_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int>,
    pub is_owned: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int>,
    pub is_read_only:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int>,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, that: *mut _cef_list_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_equal: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, that: *mut _cef_list_value_t) -> ::std::os::raw::c_int,
    >,
    pub copy: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> *mut _cef_list_value_t>,
    pub set_size: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, size: usize) -> ::std::os::raw::c_int,
    >,
    pub get_size: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> usize>,
    pub clear: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int>,
    pub remove: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> ::std::os::raw::c_int,
    >,
    pub get_type:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> cef_value_type_t>,
    pub get_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> *mut _cef_value_t>,
    pub get_bool: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> ::std::os::raw::c_int,
    >,
    pub get_int: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> ::std::os::raw::c_int,
    >,
    pub get_double: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> f64>,
    pub get_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> cef_string_userfree_t,
    >,
    pub get_binary: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> *mut _cef_binary_value_t,
    >,
    pub get_dictionary: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> *mut _cef_dictionary_value_t,
    >,
    pub get_list: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> *mut _cef_list_value_t,
    >,
    pub set_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_null: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> ::std::os::raw::c_int,
    >,
    pub set_bool: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_int: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_double: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize, value: f64) -> ::std::os::raw::c_int,
    >,
    pub set_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_binary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_binary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_dictionary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_list: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_list_value_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[repr(C)]
pub struct _cef_extension_t {
    pub base: cef_base_ref_counted_t,
    pub get_identifier:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_extension_t) -> cef_string_userfree_t>,
    pub get_path: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_extension_t) -> cef_string_userfree_t>,
    pub get_manifest:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_extension_t) -> *mut _cef_dictionary_value_t>,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_t, that: *mut _cef_extension_t) -> ::std::os::raw::c_int,
    >,
    pub get_handler:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_extension_t) -> *mut _cef_extension_handler_t>,
    pub get_loader_context:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_extension_t) -> *mut _cef_request_context_t>,
    pub is_loaded: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_extension_t) -> ::std::os::raw::c_int>,
    pub unload: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_extension_t)>,
}
#[repr(C)]
pub struct _cef_dev_tools_message_observer_t {
    pub base: cef_base_ref_counted_t,
    pub on_dev_tools_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dev_tools_message_observer_t,
            browser: *mut _cef_browser_t,
            message: *const ::std::os::raw::c_void,
            message_size: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_dev_tools_method_result: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dev_tools_message_observer_t,
            browser: *mut _cef_browser_t,
            message_id: ::std::os::raw::c_int,
            success: ::std::os::raw::c_int,
            result: *const ::std::os::raw::c_void,
            result_size: usize,
        ),
    >,
    pub on_dev_tools_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dev_tools_message_observer_t,
            browser: *mut _cef_browser_t,
            method: *const cef_string_t,
            params: *const ::std::os::raw::c_void,
            params_size: usize,
        ),
    >,
    pub on_dev_tools_agent_attached: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dev_tools_message_observer_t, browser: *mut _cef_browser_t),
    >,
    pub on_dev_tools_agent_detached: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dev_tools_message_observer_t, browser: *mut _cef_browser_t),
    >,
}
#[repr(C)]
pub struct _cef_image_t {
    pub base: cef_base_ref_counted_t,
    pub is_empty: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_image_t) -> ::std::os::raw::c_int>,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_image_t, that: *mut _cef_image_t) -> ::std::os::raw::c_int,
    >,
    pub add_bitmap: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            pixel_width: ::std::os::raw::c_int,
            pixel_height: ::std::os::raw::c_int,
            color_type: cef_color_type_t,
            alpha_type: cef_alpha_type_t,
            pixel_data: *const ::std::os::raw::c_void,
            pixel_data_size: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_png: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            png_data: *const ::std::os::raw::c_void,
            png_data_size: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_jpeg: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            jpeg_data: *const ::std::os::raw::c_void,
            jpeg_data_size: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_width: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_image_t) -> usize>,
    pub get_height: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_image_t) -> usize>,
    pub has_representation: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_image_t, scale_factor: f32) -> ::std::os::raw::c_int,
    >,
    pub remove_representation: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_image_t, scale_factor: f32) -> ::std::os::raw::c_int,
    >,
    pub get_representation_info: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            actual_scale_factor: *mut f32,
            pixel_width: *mut ::std::os::raw::c_int,
            pixel_height: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_as_bitmap: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            color_type: cef_color_type_t,
            alpha_type: cef_alpha_type_t,
            pixel_width: *mut ::std::os::raw::c_int,
            pixel_height: *mut ::std::os::raw::c_int,
        ) -> *mut _cef_binary_value_t,
    >,
    pub get_as_png: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            with_transparency: ::std::os::raw::c_int,
            pixel_width: *mut ::std::os::raw::c_int,
            pixel_height: *mut ::std::os::raw::c_int,
        ) -> *mut _cef_binary_value_t,
    >,
    pub get_as_jpeg: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            quality: ::std::os::raw::c_int,
            pixel_width: *mut ::std::os::raw::c_int,
            pixel_height: *mut ::std::os::raw::c_int,
        ) -> *mut _cef_binary_value_t,
    >,
}
#[repr(C)]
pub struct _cef_stream_reader_t {
    pub base: cef_base_ref_counted_t,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_stream_reader_t,
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
            n: usize,
        ) -> usize,
    >,
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_stream_reader_t,
            offset: int64,
            whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tell: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_stream_reader_t) -> int64>,
    pub eof: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_stream_reader_t) -> ::std::os::raw::c_int>,
    pub may_block:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_stream_reader_t) -> ::std::os::raw::c_int>,
}
#[repr(C)]
pub struct _cef_stream_writer_t {
    pub base: cef_base_ref_counted_t,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_stream_writer_t,
            ptr: *const ::std::os::raw::c_void,
            size: usize,
            n: usize,
        ) -> usize,
    >,
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_stream_writer_t,
            offset: int64,
            whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tell: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_stream_writer_t) -> int64>,
    pub flush: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_stream_writer_t) -> ::std::os::raw::c_int>,
    pub may_block:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_stream_writer_t) -> ::std::os::raw::c_int>,
}
#[repr(C)]
pub struct _cef_drag_data_t {
    pub base: cef_base_ref_counted_t,
    pub clone: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> *mut _cef_drag_data_t>,
    pub is_read_only:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int>,
    pub is_link: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int>,
    pub is_fragment: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int>,
    pub is_file: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int>,
    pub get_link_url:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t>,
    pub get_link_title:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t>,
    pub get_link_metadata:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t>,
    pub get_fragment_text:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t>,
    pub get_fragment_html:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t>,
    pub get_fragment_base_url:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t>,
    pub get_file_name:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t>,
    pub get_file_contents: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t, writer: *mut _cef_stream_writer_t) -> usize,
    >,
    pub get_file_names: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t, names: cef_string_list_t) -> ::std::os::raw::c_int,
    >,
    pub set_link_url:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t, url: *const cef_string_t)>,
    pub set_link_title:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t, title: *const cef_string_t)>,
    pub set_link_metadata:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t, data: *const cef_string_t)>,
    pub set_fragment_text:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t, text: *const cef_string_t)>,
    pub set_fragment_html:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t, html: *const cef_string_t)>,
    pub set_fragment_base_url:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t, base_url: *const cef_string_t)>,
    pub reset_file_contents: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t)>,
    pub add_file: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_drag_data_t,
            path: *const cef_string_t,
            display_name: *const cef_string_t,
        ),
    >,
    pub clear_filenames: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t)>,
    pub get_image: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> *mut _cef_image_t>,
    pub get_image_hotspot: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_point_t>,
    pub has_image: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int>,
}
#[repr(C)]
pub struct _cef_domvisitor_t {
    pub base: cef_base_ref_counted_t,
    pub visit:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domvisitor_t, document: *mut _cef_domdocument_t)>,
}
#[repr(C)]
pub struct _cef_domdocument_t {
    pub base: cef_base_ref_counted_t,
    pub get_type:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> cef_dom_document_type_t>,
    pub get_document:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> *mut _cef_domnode_t>,
    pub get_body: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> *mut _cef_domnode_t>,
    pub get_head: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> *mut _cef_domnode_t>,
    pub get_title: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> cef_string_userfree_t>,
    pub get_element_by_id: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t, id: *const cef_string_t) -> *mut _cef_domnode_t,
    >,
    pub get_focused_node:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> *mut _cef_domnode_t>,
    pub has_selection:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> ::std::os::raw::c_int>,
    pub get_selection_start_offset:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> ::std::os::raw::c_int>,
    pub get_selection_end_offset:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> ::std::os::raw::c_int>,
    pub get_selection_as_markup:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> cef_string_userfree_t>,
    pub get_selection_as_text:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> cef_string_userfree_t>,
    pub get_base_url:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> cef_string_userfree_t>,
    pub get_complete_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t, partialURL: *const cef_string_t) -> cef_string_userfree_t,
    >,
}
#[repr(C)]
pub struct _cef_domnode_t {
    pub base: cef_base_ref_counted_t,
    pub get_type: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_dom_node_type_t>,
    pub is_text: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int>,
    pub is_element: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int>,
    pub is_editable: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int>,
    pub is_form_control_element:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int>,
    pub get_form_control_element_type:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t>,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t, that: *mut _cef_domnode_t) -> ::std::os::raw::c_int,
    >,
    pub get_name: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t>,
    pub get_value: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t>,
    pub set_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t, value: *const cef_string_t) -> ::std::os::raw::c_int,
    >,
    pub get_as_markup: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t>,
    pub get_document:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domdocument_t>,
    pub get_parent: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t>,
    pub get_previous_sibling:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t>,
    pub get_next_sibling:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t>,
    pub has_children: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int>,
    pub get_first_child: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t>,
    pub get_last_child: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t>,
    pub get_element_tag_name:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t>,
    pub has_element_attributes:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int>,
    pub has_element_attribute: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t, attrName: *const cef_string_t) -> ::std::os::raw::c_int,
    >,
    pub get_element_attribute: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t, attrName: *const cef_string_t) -> cef_string_userfree_t,
    >,
    pub get_element_attributes:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domnode_t, attrMap: cef_string_map_t)>,
    pub set_element_attribute: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domnode_t,
            attrName: *const cef_string_t,
            value: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_element_inner_text:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t>,
    pub get_element_bounds: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_rect_t>,
}
#[repr(C)]
pub struct _cef_shared_memory_region_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_shared_memory_region_t) -> ::std::os::raw::c_int>,
    pub size: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_shared_memory_region_t) -> usize>,
    pub memory: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_shared_memory_region_t) -> *const ::std::os::raw::c_void,
    >,
}
#[repr(C)]
pub struct _cef_process_message_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_process_message_t) -> ::std::os::raw::c_int>,
    pub is_read_only:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_process_message_t) -> ::std::os::raw::c_int>,
    pub copy:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_process_message_t) -> *mut _cef_process_message_t>,
    pub get_name:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_process_message_t) -> cef_string_userfree_t>,
    pub get_argument_list:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_process_message_t) -> *mut _cef_list_value_t>,
    pub get_shared_memory_region: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_process_message_t) -> *mut _cef_shared_memory_region_t,
    >,
}
#[repr(C)]
pub struct _cef_string_visitor_t {
    pub base: cef_base_ref_counted_t,
    pub visit:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_string_visitor_t, string: *const cef_string_t)>,
}
#[repr(C)]
pub struct _cef_v8context_t {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct _cef_frame_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t) -> ::std::os::raw::c_int>,
    pub undo: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub redo: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub cut: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub copy: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub paste: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub del: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub select_all: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub view_source: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub get_source:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t, visitor: *mut _cef_string_visitor_t)>,
    pub get_text:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t, visitor: *mut _cef_string_visitor_t)>,
    pub load_request:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t, request: *mut _cef_request_t)>,
    pub load_url: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t, url: *const cef_string_t)>,
    pub execute_java_script: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_frame_t,
            code: *const cef_string_t,
            script_url: *const cef_string_t,
            start_line: ::std::os::raw::c_int,
        ),
    >,
    pub is_main: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t) -> ::std::os::raw::c_int>,
    pub is_focused: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t) -> ::std::os::raw::c_int>,
    pub get_name: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t) -> cef_string_userfree_t>,
    pub get_identifier: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t) -> int64>,
    pub get_parent: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t) -> *mut _cef_frame_t>,
    pub get_url: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t) -> cef_string_userfree_t>,
    pub get_browser: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t) -> *mut _cef_browser_t>,
    pub get_v8context: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t) -> *mut _cef_v8context_t>,
    pub visit_dom:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t, visitor: *mut _cef_domvisitor_t)>,
    pub create_urlrequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            client: *mut _cef_urlrequest_client_t,
        ) -> *mut _cef_urlrequest_t,
    >,
    pub send_process_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_frame_t,
            target_process: cef_process_id_t,
            message: *mut _cef_process_message_t,
        ),
    >,
}
#[repr(C)]
pub struct _cef_x509cert_principal_t {
    pub base: cef_base_ref_counted_t,
    pub get_display_name:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t>,
    pub get_common_name:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t>,
    pub get_locality_name:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t>,
    pub get_state_or_province_name:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t>,
    pub get_country_name:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t>,
    pub get_street_addresses: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t, addresses: cef_string_list_t),
    >,
    pub get_organization_names:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t, names: cef_string_list_t)>,
    pub get_organization_unit_names:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t, names: cef_string_list_t)>,
    pub get_domain_components: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t, components: cef_string_list_t),
    >,
}
#[repr(C)]
pub struct _cef_x509certificate_t {
    pub base: cef_base_ref_counted_t,
    pub get_subject: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_x509cert_principal_t,
    >,
    pub get_issuer: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_x509cert_principal_t,
    >,
    pub get_serial_number:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_binary_value_t>,
    pub get_valid_start:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> cef_basetime_t>,
    pub get_valid_expiry:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> cef_basetime_t>,
    pub get_derencoded:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_binary_value_t>,
    pub get_pemencoded:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_binary_value_t>,
    pub get_issuer_chain_size: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> usize>,
    pub get_derencoded_issuer_chain: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_x509certificate_t,
            chainCount: *mut usize,
            chain: *mut *mut _cef_binary_value_t,
        ),
    >,
    pub get_pemencoded_issuer_chain: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_x509certificate_t,
            chainCount: *mut usize,
            chain: *mut *mut _cef_binary_value_t,
        ),
    >,
}
#[repr(C)]
pub struct _cef_sslstatus_t {
    pub base: cef_base_ref_counted_t,
    pub is_secure_connection:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_sslstatus_t) -> ::std::os::raw::c_int>,
    pub get_cert_status: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_sslstatus_t) -> cef_cert_status_t>,
    pub get_sslversion: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_sslstatus_t) -> cef_ssl_version_t>,
    pub get_content_status:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_sslstatus_t) -> cef_ssl_content_status_t>,
    pub get_x509certificate:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_sslstatus_t) -> *mut _cef_x509certificate_t>,
}
#[repr(C)]
pub struct _cef_navigation_entry_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> ::std::os::raw::c_int>,
    pub get_url:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_string_userfree_t>,
    pub get_display_url:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_string_userfree_t>,
    pub get_original_url:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_string_userfree_t>,
    pub get_title:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_string_userfree_t>,
    pub get_transition_type:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_transition_type_t>,
    pub has_post_data:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> ::std::os::raw::c_int>,
    pub get_completion_time:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_basetime_t>,
    pub get_http_status_code:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> ::std::os::raw::c_int>,
    pub get_sslstatus:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> *mut _cef_sslstatus_t>,
}
#[repr(C)]
pub struct _cef_registration_t {
    pub base: cef_base_ref_counted_t,
}
#[repr(C)]
pub struct _cef_client_t {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct _cef_browser_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int>,
    pub get_host: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t) -> *mut _cef_browser_host_t>,
    pub can_go_back: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int>,
    pub go_back: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t)>,
    pub can_go_forward:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int>,
    pub go_forward: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t)>,
    pub is_loading: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int>,
    pub reload: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t)>,
    pub reload_ignore_cache: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t)>,
    pub stop_load: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t)>,
    pub get_identifier:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int>,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t, that: *mut _cef_browser_t) -> ::std::os::raw::c_int,
    >,
    pub is_popup: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int>,
    pub has_document: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int>,
    pub get_main_frame: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t) -> *mut _cef_frame_t>,
    pub get_focused_frame: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t) -> *mut _cef_frame_t>,
    pub get_frame_byident:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t, identifier: int64) -> *mut _cef_frame_t>,
    pub get_frame: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t, name: *const cef_string_t) -> *mut _cef_frame_t,
    >,
    pub get_frame_count: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t) -> usize>,
    pub get_frame_identifiers: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t, identifiersCount: *mut usize, identifiers: *mut int64),
    >,
    pub get_frame_names:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t, names: cef_string_list_t)>,
}
#[repr(C)]
pub struct _cef_run_file_dialog_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_file_dialog_dismissed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_run_file_dialog_callback_t, file_paths: cef_string_list_t),
    >,
}
#[repr(C)]
pub struct _cef_navigation_entry_visitor_t {
    pub base: cef_base_ref_counted_t,
    pub visit: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_navigation_entry_visitor_t,
            entry: *mut _cef_navigation_entry_t,
            current: ::std::os::raw::c_int,
            index: ::std::os::raw::c_int,
            total: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
#[repr(C)]
pub struct _cef_pdf_print_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_pdf_print_finished: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_pdf_print_callback_t,
            path: *const cef_string_t,
            ok: ::std::os::raw::c_int,
        ),
    >,
}
#[repr(C)]
pub struct _cef_download_image_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_download_image_finished: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_download_image_callback_t,
            image_url: *const cef_string_t,
            http_status_code: ::std::os::raw::c_int,
            image: *mut _cef_image_t,
        ),
    >,
}
#[repr(C)]
pub struct _cef_browser_host_t {
    pub base: cef_base_ref_counted_t,
    pub get_browser:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_browser_t>,
    pub close_browser: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, force_close: ::std::os::raw::c_int),
    >,
    pub try_close_browser:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int>,
    pub set_focus:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t, focus: ::std::os::raw::c_int)>,
    pub get_window_handle:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_ulong>,
    pub get_opener_window_handle:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_ulong>,
    pub has_view: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int>,
    pub get_client: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_client_t>,
    pub get_request_context:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_request_context_t>,
    pub get_zoom_level: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> f64>,
    pub set_zoom_level: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t, zoomLevel: f64)>,
    pub run_file_dialog: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            mode: cef_file_dialog_mode_t,
            title: *const cef_string_t,
            default_file_path: *const cef_string_t,
            accept_filters: cef_string_list_t,
            callback: *mut _cef_run_file_dialog_callback_t,
        ),
    >,
    pub start_download:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t, url: *const cef_string_t)>,
    pub download_image: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            image_url: *const cef_string_t,
            is_favicon: ::std::os::raw::c_int,
            max_image_size: uint32,
            bypass_cache: ::std::os::raw::c_int,
            callback: *mut _cef_download_image_callback_t,
        ),
    >,
    pub print: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub print_to_pdf: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            path: *const cef_string_t,
            settings: *const _cef_pdf_print_settings_t,
            callback: *mut _cef_pdf_print_callback_t,
        ),
    >,
    pub find: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            searchText: *const cef_string_t,
            forward: ::std::os::raw::c_int,
            matchCase: ::std::os::raw::c_int,
            findNext: ::std::os::raw::c_int,
        ),
    >,
    pub stop_finding: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, clearSelection: ::std::os::raw::c_int),
    >,
    pub show_dev_tools: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            windowInfo: *const _cef_window_info_t,
            client: *mut _cef_client_t,
            settings: *const _cef_browser_settings_t,
            inspect_element_at: *const cef_point_t,
        ),
    >,
    pub close_dev_tools: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub has_dev_tools:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int>,
    pub send_dev_tools_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            message: *const ::std::os::raw::c_void,
            message_size: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub execute_dev_tools_method: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            message_id: ::std::os::raw::c_int,
            method: *const cef_string_t,
            params: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_dev_tools_message_observer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            observer: *mut _cef_dev_tools_message_observer_t,
        ) -> *mut _cef_registration_t,
    >,
    pub get_navigation_entries: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            visitor: *mut _cef_navigation_entry_visitor_t,
            current_only: ::std::os::raw::c_int,
        ),
    >,
    pub replace_misspelling:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t, word: *const cef_string_t)>,
    pub add_word_to_dictionary:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t, word: *const cef_string_t)>,
    pub is_window_rendering_disabled:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int>,
    pub was_resized: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub was_hidden:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t, hidden: ::std::os::raw::c_int)>,
    pub notify_screen_info_changed: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub invalidate:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t, type_: cef_paint_element_type_t)>,
    pub send_external_begin_frame: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub send_key_event:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t, event: *const cef_key_event_t)>,
    pub send_mouse_click_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            event: *const cef_mouse_event_t,
            type_: cef_mouse_button_type_t,
            mouseUp: ::std::os::raw::c_int,
            clickCount: ::std::os::raw::c_int,
        ),
    >,
    pub send_mouse_move_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            event: *const cef_mouse_event_t,
            mouseLeave: ::std::os::raw::c_int,
        ),
    >,
    pub send_mouse_wheel_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            event: *const cef_mouse_event_t,
            deltaX: ::std::os::raw::c_int,
            deltaY: ::std::os::raw::c_int,
        ),
    >,
    pub send_touch_event:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t, event: *const cef_touch_event_t)>,
    pub send_capture_lost_event: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub notify_move_or_resize_started: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub get_windowless_frame_rate:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int>,
    pub set_windowless_frame_rate:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t, frame_rate: ::std::os::raw::c_int)>,
    pub ime_set_composition: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            text: *const cef_string_t,
            underlinesCount: usize,
            underlines: *const cef_composition_underline_t,
            replacement_range: *const cef_range_t,
            selection_range: *const cef_range_t,
        ),
    >,
    pub ime_commit_text: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            text: *const cef_string_t,
            replacement_range: *const cef_range_t,
            relative_cursor_pos: ::std::os::raw::c_int,
        ),
    >,
    pub ime_finish_composing_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, keep_selection: ::std::os::raw::c_int),
    >,
    pub ime_cancel_composition: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub drag_target_drag_enter: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            drag_data: *mut _cef_drag_data_t,
            event: *const cef_mouse_event_t,
            allowed_ops: cef_drag_operations_mask_t,
        ),
    >,
    pub drag_target_drag_over: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            event: *const cef_mouse_event_t,
            allowed_ops: cef_drag_operations_mask_t,
        ),
    >,
    pub drag_target_drag_leave: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub drag_target_drop:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t, event: *const cef_mouse_event_t)>,
    pub drag_source_ended_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            op: cef_drag_operations_mask_t,
        ),
    >,
    pub drag_source_system_drag_ended: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub get_visible_navigation_entry:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_navigation_entry_t>,
    pub set_accessibility_state:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t, accessibility_state: cef_state_t)>,
    pub set_auto_resize_enabled: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            enabled: ::std::os::raw::c_int,
            min_size: *const cef_size_t,
            max_size: *const cef_size_t,
        ),
    >,
    pub get_extension:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_extension_t>,
    pub is_background_host:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int>,
    pub set_audio_muted:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t, mute: ::std::os::raw::c_int)>,
    pub is_audio_muted:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int>,
}
#[repr(C)]
pub struct _cef_get_extension_resource_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_get_extension_resource_callback_t, stream: *mut _cef_stream_reader_t),
    >,
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_get_extension_resource_callback_t)>,
}
#[repr(C)]
pub struct _cef_extension_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_extension_load_failed:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_extension_handler_t, result: cef_errorcode_t)>,
    pub on_extension_loaded: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_handler_t, extension: *mut _cef_extension_t),
    >,
    pub on_extension_unloaded: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_handler_t, extension: *mut _cef_extension_t),
    >,
    pub on_before_background_browser: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            url: *const cef_string_t,
            client: *mut *mut _cef_client_t,
            settings: *mut _cef_browser_settings_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_before_browser: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            browser: *mut _cef_browser_t,
            active_browser: *mut _cef_browser_t,
            index: ::std::os::raw::c_int,
            url: *const cef_string_t,
            active: ::std::os::raw::c_int,
            windowInfo: *mut _cef_window_info_t,
            client: *mut *mut _cef_client_t,
            settings: *mut _cef_browser_settings_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_active_browser: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            browser: *mut _cef_browser_t,
            include_incognito: ::std::os::raw::c_int,
        ) -> *mut _cef_browser_t,
    >,
    pub can_access_browser: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            browser: *mut _cef_browser_t,
            include_incognito: ::std::os::raw::c_int,
            target_browser: *mut _cef_browser_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_extension_resource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            browser: *mut _cef_browser_t,
            file: *const cef_string_t,
            callback: *mut _cef_get_extension_resource_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[repr(C)]
pub struct _cef_media_router_t {
    pub base: cef_base_ref_counted_t,
    pub add_observer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_router_t,
            observer: *mut _cef_media_observer_t,
        ) -> *mut _cef_registration_t,
    >,
    pub get_source: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_router_t, urn: *const cef_string_t) -> *mut _cef_media_source_t,
    >,
    pub notify_current_sinks: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_router_t)>,
    pub create_route: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_router_t,
            source: *mut _cef_media_source_t,
            sink: *mut _cef_media_sink_t,
            callback: *mut _cef_media_route_create_callback_t,
        ),
    >,
    pub notify_current_routes: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_router_t)>,
}
#[repr(C)]
pub struct _cef_media_observer_t {
    pub base: cef_base_ref_counted_t,
    pub on_sinks: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_observer_t,
            sinksCount: usize,
            sinks: *const *mut _cef_media_sink_t,
        ),
    >,
    pub on_routes: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_observer_t,
            routesCount: usize,
            routes: *const *mut _cef_media_route_t,
        ),
    >,
    pub on_route_state_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_observer_t,
            route: *mut _cef_media_route_t,
            state: cef_media_route_connection_state_t,
        ),
    >,
    pub on_route_message_received: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_observer_t,
            route: *mut _cef_media_route_t,
            message: *const ::std::os::raw::c_void,
            message_size: usize,
        ),
    >,
}
#[repr(C)]
pub struct _cef_media_route_t {
    pub base: cef_base_ref_counted_t,
    pub get_id: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_route_t) -> cef_string_userfree_t>,
    pub get_source:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_route_t) -> *mut _cef_media_source_t>,
    pub get_sink: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_route_t) -> *mut _cef_media_sink_t>,
    pub send_route_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_route_t,
            message: *const ::std::os::raw::c_void,
            message_size: usize,
        ),
    >,
    pub terminate: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_route_t)>,
}
#[repr(C)]
pub struct _cef_media_route_create_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_media_route_create_finished: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_route_create_callback_t,
            result: cef_media_route_create_result_t,
            error: *const cef_string_t,
            route: *mut _cef_media_route_t,
        ),
    >,
}
#[repr(C)]
pub struct _cef_media_sink_t {
    pub base: cef_base_ref_counted_t,
    pub get_id: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_sink_t) -> cef_string_userfree_t>,
    pub get_name: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_sink_t) -> cef_string_userfree_t>,
    pub get_description:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_sink_t) -> cef_string_userfree_t>,
    pub get_icon_type:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_sink_t) -> cef_media_sink_icon_type_t>,
    pub get_device_info: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_sink_t, callback: *mut _cef_media_sink_device_info_callback_t),
    >,
    pub is_cast_sink:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_sink_t) -> ::std::os::raw::c_int>,
    pub is_dial_sink:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_sink_t) -> ::std::os::raw::c_int>,
    pub is_compatible_with: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_sink_t, source: *mut _cef_media_source_t) -> ::std::os::raw::c_int,
    >,
}
#[repr(C)]
pub struct _cef_media_sink_device_info_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_media_sink_device_info: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_sink_device_info_callback_t,
            device_info: *const _cef_media_sink_device_info_t,
        ),
    >,
}
#[repr(C)]
pub struct _cef_media_source_t {
    pub base: cef_base_ref_counted_t,
    pub get_id: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_source_t) -> cef_string_userfree_t>,
    pub is_cast_source:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_source_t) -> ::std::os::raw::c_int>,
    pub is_dial_source:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_source_t) -> ::std::os::raw::c_int>,
}
#[repr(C)]
pub struct _cef_request_context_handler_t {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct _cef_scheme_handler_factory_t {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct _cef_resolve_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_resolve_completed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resolve_callback_t,
            result: cef_errorcode_t,
            resolved_ips: cef_string_list_t,
        ),
    >,
}
#[repr(C)]
pub struct _cef_request_context_t {
    pub base: cef_base_ref_counted_t,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            other: *mut _cef_request_context_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_sharing_with: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            other: *mut _cef_request_context_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_global:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_context_t) -> ::std::os::raw::c_int>,
    pub get_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_context_t) -> *mut _cef_request_context_handler_t,
    >,
    pub get_cache_path:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_context_t) -> cef_string_userfree_t>,
    pub get_cookie_manager: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t,
        ) -> *mut _cef_cookie_manager_t,
    >,
    pub register_scheme_handler_factory: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            scheme_name: *const cef_string_t,
            domain_name: *const cef_string_t,
            factory: *mut _cef_scheme_handler_factory_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub clear_scheme_handler_factories:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_context_t) -> ::std::os::raw::c_int>,
    pub has_preference: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_context_t, name: *const cef_string_t) -> ::std::os::raw::c_int,
    >,
    pub get_preference: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_context_t, name: *const cef_string_t) -> *mut _cef_value_t,
    >,
    pub get_all_preferences: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            include_defaults: ::std::os::raw::c_int,
        ) -> *mut _cef_dictionary_value_t,
    >,
    pub can_set_preference: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_context_t, name: *const cef_string_t) -> ::std::os::raw::c_int,
    >,
    pub set_preference: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            name: *const cef_string_t,
            value: *mut _cef_value_t,
            error: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub clear_certificate_exceptions: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_context_t, callback: *mut _cef_completion_callback_t),
    >,
    pub clear_http_auth_credentials: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_context_t, callback: *mut _cef_completion_callback_t),
    >,
    pub close_all_connections: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_context_t, callback: *mut _cef_completion_callback_t),
    >,
    pub resolve_host: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            origin: *const cef_string_t,
            callback: *mut _cef_resolve_callback_t,
        ),
    >,
    pub load_extension: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            root_directory: *const cef_string_t,
            manifest: *mut _cef_dictionary_value_t,
            handler: *mut _cef_extension_handler_t,
        ),
    >,
    pub did_load_extension: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            extension_id: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub has_extension: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            extension_id: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_extensions: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            extension_ids: cef_string_list_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_extension: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            extension_id: *const cef_string_t,
        ) -> *mut _cef_extension_t,
    >,
    pub get_media_router: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t,
        ) -> *mut _cef_media_router_t,
    >,
}
#[repr(C)]
pub struct _cef_response_t {
    pub base: cef_base_ref_counted_t,
    pub is_read_only: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t) -> ::std::os::raw::c_int>,
    pub get_error: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_errorcode_t>,
    pub set_error: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t, error: cef_errorcode_t)>,
    pub get_status: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t) -> ::std::os::raw::c_int>,
    pub set_status:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t, status: ::std::os::raw::c_int)>,
    pub get_status_text:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t>,
    pub set_status_text:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t, statusText: *const cef_string_t)>,
    pub get_mime_type:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t>,
    pub set_mime_type:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t, mimeType: *const cef_string_t)>,
    pub get_charset: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t>,
    pub set_charset:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t, charset: *const cef_string_t)>,
    pub get_header_by_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, name: *const cef_string_t) -> cef_string_userfree_t,
    >,
    pub set_header_by_name: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_response_t,
            name: *const cef_string_t,
            value: *const cef_string_t,
            overwrite: ::std::os::raw::c_int,
        ),
    >,
    pub get_header_map:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t, headerMap: cef_string_multimap_t)>,
    pub set_header_map:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t, headerMap: cef_string_multimap_t)>,
    pub get_url: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t>,
    pub set_url: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t, url: *const cef_string_t)>,
}
#[repr(C)]
pub struct _cef_urlrequest_t {
    pub base: cef_base_ref_counted_t,
    pub get_request: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> *mut _cef_request_t>,
    pub get_client:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> *mut _cef_urlrequest_client_t>,
    pub get_request_status:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> cef_urlrequest_status_t>,
    pub get_request_error:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> cef_errorcode_t>,
    pub get_response:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> *mut _cef_response_t>,
    pub response_was_cached:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> ::std::os::raw::c_int>,
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_urlrequest_t)>,
}
pub type cef_urlrequest_t = _cef_urlrequest_t;
extern "C" {
    pub fn cef_urlrequest_create(
        request: *mut _cef_request_t,
        client: *mut _cef_urlrequest_client_t,
        request_context: *mut _cef_request_context_t,
    ) -> *mut cef_urlrequest_t;
}
#[repr(C)]
pub struct _cef_urlrequest_client_t {
    pub base: cef_base_ref_counted_t,
    pub on_request_complete: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_urlrequest_client_t, request: *mut _cef_urlrequest_t),
    >,
    pub on_upload_progress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_urlrequest_client_t,
            request: *mut _cef_urlrequest_t,
            current: int64,
            total: int64,
        ),
    >,
    pub on_download_progress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_urlrequest_client_t,
            request: *mut _cef_urlrequest_t,
            current: int64,
            total: int64,
        ),
    >,
    pub on_download_data: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_urlrequest_client_t,
            request: *mut _cef_urlrequest_t,
            data: *const ::std::os::raw::c_void,
            data_length: usize,
        ),
    >,
    pub get_auth_credentials: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_urlrequest_client_t,
            isProxy: ::std::os::raw::c_int,
            host: *const cef_string_t,
            port: ::std::os::raw::c_int,
            realm: *const cef_string_t,
            scheme: *const cef_string_t,
            callback: *mut _cef_auth_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
}
